* 이번주~다음주 
 - 오전 : JS 기본적인 개념과 문법 + 간단한 실습
 - 오후 :  html & css & js / jquery 로 다룬 실습페이지
 3개남았다
 저번에 하다만거 
 저번에 말했던거
 피그마 + html + css + js

다다음주부터 
 - 오전오후 : JS 중심의 수업

------------------------------------------------------------

1. 웹디자이너 / 퍼블리셔 & 프론트엔드 경계
  지금까진 퍼블리셔의 작업까지만했다
 - html5 + css3 웹앱페이지 레이아웃 설계 & 구성
    + jQuery 플러그인 까지가 예전의 퍼블리셔의 작업
   정적인 페이지를 제작까지만할거냐 VS 인터렉티브한 페이지까지제작할거냐
    인터렉티브한 페이지 (동적인페이지) => 자바스크립트
 -  요즘은 JS 마스터 하길 기대한다 + JS 프레임워크 마스터까지 바란다
 -  또 퍼블리셔와 프론트엔드의 경계가 모호해지고있다

2. JS = > 비전공자한테는 낯설고 생소한 언어이다
 - 공부해야하는 범위가 굉장히 넓고 깊다!
 - 공부해야하는 목적과 목표가 불분명하면 => 중도포기
   목적 => 인터렉티브한 페이지까지제작
 - 전세계 6위에 해당한 js (전에는 20위정도했다) (Node덕분이다)
 - 원래는 웹브라우저에서만 사용가능했었다 ( 즉, 가성비 떨어지는 언어 )
 - 앱이나 게임 뮤직앱 서버 등등을 만들때 못사용해서 인기가없었다
    => 2010초반에 Node덕분에 만들수 있게됐다

3. Node 설치!! 
  - 우린 배포할때 => firebase 배포할때 설치했다
  - Node 없으면 firebase 설치 불가하다
 
4. Google에 Chrome에 V8검색엔진
 - 키워드 입렵 => 키워드
 - 속도 / 효율성(*cpy / 사양) 에 압도적이다 

5. V8검색엔진 > JS 실행환경 > 외부로꺼내보자!
 - Node > 서버 / 게임

6. script언어
 제이쿼리 사용목적 & 약식
html & js 연동 목적으로만 알려주셨었다

- html & css연결 방법 
    => - 인라인스타일시트 
         - 내부스타일시트(html파일에서 head에서 style태그) 
         - 외부스타일시트 - 실무에서

- javascript 연결방법
    => - 인라인스타일시트 
         - 내부스타일시트
         - 외부스타일시트 - 실무에서

< defe >
index.html을 먼저 읽는다
순서대로 읽다가 style.css읽다가 잠깐멈춰서 그 파일로 이동한다
style.css읽다가 스타일 적용한다
그러다가 script파일을 읽는다 

웹브라우저는 script파일 읽다가 html에 body영역을 못읽는다
 =>  동시작업못한다
 html에 body영역읽을때 script.js파일을 까먹는다

=> 그래서 defer라는 속성을 적용해야한다!!
 동시에 같이 읽게하는거다

defer 쓸때
=> html에서 찾아올게 있을때만 쓴다
defer 안쓸때
=> html에서 찾아올게 없을때 쓴다
=> 이때쓰면 하염없이 기다린다

defer 쓸때 => 선택자를 불러와야하는상황, 
defer 안쓸때 =>선택자를 불러오지않아도 출력해야하는상황
둘다인경우 => 흔치는 않다 


*JS에서 사용할 수 있는 기능이 많다!!
 - 개발자들이 생각하는 방식은 비슷하다
 - 어떤 상황에서 이런 기능
 - 웹 브라우저에서 탑재 = 내장 시켰다


* JS에서 사용할 수 있는 웹브라우저 내장 함수 3대장 
       (빈번하게 사용되니 알아둬라)
 - alert() : 알림창 사용 (alert함수)
    ex.  alert("오늘도 화이팅입니다!");
 - confirm() : 승인여부 사용  (confirm함수)
    ex.  confirm("오늘도 화이팅 하시겠습니까?");
 - prompt() : 사용자로 하여금 어떤 값을 받고자 할 때 사용 (prompt함수)
    ex.  prompt("당신의 이름을 입력해주세요!");


* 웹브라우저 시스템 > window라는 시스템 >  내장함수를 쓸수있다
 > CS = Computer Science = 컴퓨터공학
  컴퓨터 시스템 운영체제를 알아야한다 , 
  구현되는 원리를 알아야한다(컴퓨터공학)
   =>  여기에서 전공자와 비전공자 차이가 난다
 > 유튜브나 책으로 => !!!!!!컴퓨터 운영체제 가볍게 공부하기!!!!!
     (JS 와도 연관있다)
 > css에서 정렬할때 =>  margin, float, flex, grid, transform 등등 썼다
   이 다섯개가 차이가 크지 않았다
 >  JS에서 배열 => 반복 => while, for, for in, for of 
     여기서는 결과가 차이가 크다
 > 자료구조 / 알고리즘 배울거다

* 지금까지 내가 작성해왔던 모든 html 문서들은 window라는 웹브라우저 시스템안에 document 공간에 저장되어 왔다!

 > document만의 내장함수가 있다 
    => wirte라는 함수 : 웹브라우저 안에 문서를 출력하고자 할 때!!
 > document는 함수가 아니다
    document.write( )
    document라는 객체안에 write라는 함수를쓴거다
   > document object model = DOM   
       => 돔이라고 부른다 

* console은 함수가 아니다 함수는 뒤에( )가 나와야한다
  console.log( ) => log가 함수다
  console은 객체다

* window = 객체
Browser안에서 최상위의 객체다 
Browser Object Model = BOM을 학습한다 라고한다
안 써도 작동한다

* DOM   BOM 을 학습해야한다
 document object model = DOM
 Browser Object Model = BOM
 둘이 헷갈리면 안된다
 documetn.alert( ) 라고쓰면 안된다!!


--------------------------------------------------------------------

모든 프로그래밍 언어!!!! => 기초  & 기본 토대 = 변수!!
 변수 =>  변할 수 있는 수(*값) => 값을 담아 놓을때 사용한다
 => 바구니역할을 한다

"선언"(변수를 "선언"한다고 한다) / "할당"(변수를 "할당"한다고 한다)
"선언" = 생성한다 만든다!
"할당" = 선언한 변수 안에 값을 넣는다!

const라는 키워드로 변수를 선언하게 되면, const안에 담긴 값을 상수라고 부른다 (*고정값) 
 변수<->상수
const를 제일 우선적으로 사용하는게 좋다

--------------------------------
!!!!!!시험문제!!!!!!
var / let / const 
차이점 설명하세요
예 아니오로 대답하세요 등등...
--------------------------------

console로해서 웹페이지에서 확인하는 방법도 있고
터미널에 밑에처럼 입력해서 알아보는 방법도있다
node ./script.js
=> script.js안에 실행시켜야될 파일을 노드를 활용해서 실행시켜라

-------------------------------------------------------------------

* JS 변수 할당 가능한 자료형
1) 숫자형 = number
  const data = 5;
2) 문자열 = string
  const str = "hello"
3) 논리형 - 참이냐 거짓이냐 
   = true / false / null(유효하지 않은 값) / undefined(값은 값인데 아직 정의가 되지 않은 값) (서버가 전송은 하는데 오지 않은상태에서도 뜬다)
  const boolean = true;
4) 객체 => 객체는 여러개의 연관성이 있는 값을 하나로 묶어놓은 집합
5) 배열
6) 심벌 (2015년(자바스크립트 근간이 되었던 문법이 손질됐다) 이후에)
7) 함수

* 사용자의 선택에 의해서 => 페이지 혹은 결과값을 상이하게 출력해야하는 경우가 많다
* JS : 문자 + 문자 => 무조건 결과값 문자!!
"" 붙이는 순간 문자가된다!!!!

* typeof :  변수안에 담긴 값의 자료형태를 확인시켜주는 키워드

* 템플릿리터럴 : 변수와 문자 혹은 숫자 등의 값을 출력하고자 할 때, 중간에 연산자 " +" 룰 굳이 넣지 않더라도 정상적으로 값을 출력시켜줄 수 있는 문법
 => 템플릿리터럴 쓸때 백틱 ( ` )을써야 쓸 수있다

