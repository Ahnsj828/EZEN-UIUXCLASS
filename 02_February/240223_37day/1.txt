< 오전 - 이벤트에 대한 내용 > < 오후 - UI 디자인 (Figma) >
<JS Process>

1. 변수

2. 자료형(태/식)

3. 자료형 변환 = 형변환 (자료형에 대한 변환)
  - 문자 => 숫자로 변환 - 쌤은 Number( )를 쓰신다(가장 강력한상위개념이라)
  - 숫자 => 문자로 변환 - 쌤은 String( )를 쓰신다(가장 강력한상위개념이라)
     Number, String 이 다른 개념들을 포괄해서
  - 문자 & 숫자 => 논리 Boolean ( )

4. 연산자
 - 산술연산자 : + - / *
 - 연결연산자
 - 할당연산자
 - 비교연산자
 - 논리연산자
(***삼항조건연산자) 항이 세개이인 조건인 연산자 - 너무 중요하다!!!

5. 제어문
 - 조건문
  > if문 - 만약에 ~라면 이거해줘
  > if...else문 (*else if문) - 이거아니면 이거?
  > switch문 -이중에서 골라
  
 - 반복문
  > for문 - ~하는 동안에
  > forEach문
  > for..in문 => 객체 전용
  > for...of문 => 배열전용
  > while문
  > do...while문
 (*break문 & continue문)


6. 함수 => 자바스크립트의 꽃 / 핵심요소다
 => 어떤 여러 "기능" 및 "명령"들을 하나로 묶어놓은 집합체 or 그룹
     ex. html에서 구현가능한 동영상을 찾아와라(명령)
         해당 동영상을 찾아와서 내가 원하는 사이즈로 화면에 구현시켜라(명령)
 => 굳이 개별 기능, 명령들을 따로따로 독립적으로 실행시키지 않아도 구현 가능!
 => 함수는 어떻게 생겼는가?
 - 클래스 / 익명 / 화살표
 - 매개변수 & 인수(*인자값)
 - return (*함수 결과값 반환)
 - 스코프 (*블록 / 지역 / 전역)
 - var 쓰지마라 / 지역스코프 변수 / const (*권장)
 - 즉시실행함수
 - 변수선언 키워드 입력 => 전역변수
 - hoisting (*클래스함수 VS 익명함수 & 화살표)
 - JS를 1급 시민이라고 한다
 - 전개연산자 구문
 - 나머지 매개변수
 - 시간관련 내장함수
(* setInterval / clearInterval / setTimeout)
 - 재귀함수 


7. DOM
 ( DOM은 일종의 시스템이다 / DOM하겠다 = 시스템을 이해하겠다 )
 ( Document Object Model )
 (    문서        객체   모델 )
 (  Object = 프로그래밍의 모든 전 과정 및 절차를 => 객체화 한다 )
 (  자바스크립트 =  객체지향 언어 )
 - querySelector / getElement
 - innerText / innerHTML / textContent
 - "on" 이벤트 핸들러
 - classLish
 - add( ) 클래스 값을 확인하고 추가할때 <-> remove 클래스 값을 확인하고 제거할때 / toggle( )
 - contains ( )
 - form
 - dom 선택자를 통해서 값을 찾아오는 방법 => value를 활용해서
   > #, ., tag 속성을 통해서 찾아올수있다
   > name이라는 속성을 통해서도 찾아올수있다
   > form 배열 요소

<<<<<<< HEAD
=======
======================================================
>>>>>>> refs/remotes/origin/master

8. Event 
 >이벤트 => 정적 : 동적 *이벤트
           => 사용자가 웹,앱 액션 행위를 하는 것 
           => 무엇인가를 실행시켜주는 것
           => click / load / submit
            키보드 치는건 액션 값을 넣어주는건 리액션

Refactoring 하는 가장 큰 목적 => Cleancode를 작성하기 위해 => 특정 요소에 과한 기능이 포함되었을 경우, 해당 요소에 버그 발생시, 디버깅을 하기가 매우 비효율 적인 상황이 발생할 수 있어서 => 미연방지하기 위해서 각각의 독립적인 기능을 따로 분리시켜놓는 작업 => 향후 코드를 재가공 & 유지,보수

*모든 이벤트에 해당하는 것은 아니나, 거의 대부분 웹에서 이벤트가 발생하게 되면 이벤트 객체라는 것이 생성된다!

*이벤트 종류
 - 문서 로딩 이벤트
 - 마우스 이벤트
 - 키보드 이벤트
 - 폼 이벤트

 > 이벤트 처리하는 방법(실행방법)
    - 인라인 스크립트 처리하는 방법 : HTML 문서에 직접 이벤트를 정의하는 방법
    - 외부 스크립트 방법 : 이벤트 핸들러를 사용하는 방법
    - 외부 스크립트 방법 : 이벤트 리스너를 사용하는 방법 (많이 사용할거다)
        리슨 =  듣다 /  리스너 = 청취자

 (* 슬라이드 = 캐러셀)

 > 이벤트 버블링
     부모요소에 이벤트가 전파된다 (자식에 이벤트 실행하면 부모도 적용된다)
 > 이벤트 캡처링(거의 안쓴다)
      이벤트 버블링 반대 자식요소에 이벤트가 전파된다 (부모에 이벤트 실행하면 자식도 적용된다)
     드릴링 효과 


<<<<<<< HEAD
======================================================

9. DOM 심화
  - createElement( )
  - createTextNode( )
  - appendChild( )
  - createAttribute( )
  - setAttributeNode( )
  - remove ( ) 이벤트가 적용된 자기 자신을 날리겠다
  - parentNode  => 함수 아니다 속성이다
  - removeChild( ) 자식 요소를 날리겠다

10. 객체!!!


무한자동 슬라이드 쓰려면 insertBefore를써야한다(어마 무시하게 중요하다)
버튼을 클릭해서 넘어가는게 아니라 자동적으로 사진이 넘어가고 & 사진들 다 보여주면 다시 첫번째 사진으로 가서 다시 시작하는거
=======
>>>>>>> refs/remotes/origin/master
