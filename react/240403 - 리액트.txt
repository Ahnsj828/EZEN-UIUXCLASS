1. 기본 개념
- components
- virtural Dom
- CSR

2. JSX 문법

3. props 객체

4. state 변수: component가 가지고 있는 상태값
 - 상태 값을 변경하려면 useState() : React Hooks중 하나!!
 - form 태그 요소 안에 있는 기본적인 input 태그 || textarea || select && option
 - 상태의 변화값을 check하고 state 변수값이 업데이트가 될 수 있도록 제어!!

5. props & state 변수 동시에 활용!!

* React Hooks
 -> 언제 , 어떤 리액트 훅을 가져다가 사용해야하는지 모르겠다는 질문

*JS
 짝수 ===> %2 ===0

** 왜? 컴포넌트를 자꾸 만들어서 작업하는가?
 1) React 장점 : JS를 활용 작업 => 300줄 / 문제 = bug
 300줄 달하는 JS 문장 하나씩 검증 해야한다 => debuging

 2) conponent 안에 존재하는 state 변수값이 업데이트가 되는 순간 => rerendering 리랜더링

 * React는 Rendering이 매우 중요한 개념!!
 => html을 포함한 기타 웹브라우저 parsing할 수 있는 문서를 웹 브라우저가 화면에 출력해주는 기능
     =>이 기능을 rendering이라고 한다

  랜더링이 언제 발생하는가?
   0) component가 mount(탄생되는순간)가 되는 순간 무조건 최초 rendering이 발생
   1) component의 state값이 변경되면 무조건 rendering이 발생
   2) 부모 component로 부터 받아오는 props의 값이 변경되면 무조건 rendering이 발생
   3) 부모 component가 rendering이 되면, 무조건 자식 component도 rendering이 된다

* 리액트 훅 : useRef( ) : 특정 돔으로 활용할때 사용
 - Ref = reference 약어 => 참조 라는 뜻
 - 기존 JS, DOM을 활용해서 html 문서를 컨트롤했던 그 기능!
 - JS에서 DOM을 활용해서 input.valuse = ""
  
useState( ) : Component의 State 변수값을 컨트롤 해주는 훅 함수
useRef( ) : 특정 요소의 DOM을 컨트롤 해주는 훅 함수
useEffect( ) : 컴포넌트의 "생애주기(= life cycle)" 를 컨트롤 해주는 훅 함수
   => 중요하다!!

 - 사람도 생애주기가 있다 
 - 탄생 -> 유아기 -> 청소년기 -> 성인 -> 노인 -> 사망
 - 컴포넌트도 생애주기가 존재한다
 - mount(컴포넌트가 시작됐다/ 탄생됐다) -> update(컴포넌트가) -> unmount(컴포넌트 기능종료)
 - 리액트는 가상돔 사용하고 훅으로
       date컴포넌트가 업데이트가 될때 이걸해줘
 1) 의존성 배열이 업데이트 or 변경되면 useEffect( ) 안에 callback 실행
    API데이터 끌어올때 사용한다
    => 외부 API => state
    => 웹 브라우저 처음 켜졌을 때에는 data x
    => 사용자가 지역 매장정보 값 보려고 버튼을 누르거나 select
    => 의존성 배열에 복수의 state값을 적용한 경우, 그 중 1개만 업데이트가 되어도 useEffect( )실행

 2) 만약, "의존성 배열"을 설정하지 않은 경우, 컴포넌트가 랜더링 될 때마다 콜백함수를 실행시킨다
 
 3) 만약, "의존성 배열"에 빈배열을 적용하는 경우, 컴포넌트가 최초 mount가 되는 시점에만 딱 한번 실행

 => API 데이터를 가져와서 사용해야하는 그 시점!!
 => 웹브라우저를 처음 켜자마자 바로 무언가를 딱 한번 실행시켜야하는 상황!!
     ex. 팝업창 
업데이트 해야될때 => 연산작업해야할때 사용

cleanup 개념 



*ToDoList => React.js
* 어떤 기능을 구현할것인지에 대한 정의 => 화면 UI 설계  => 기능 부여
 > Header 컴포넌트 : ToDoList 소개 & 설명하는 텍스트 역할
 
 > ToDo Editor 컴포넌트 :
     - Input태그영역 / 사용자가 지금 해야할 일을 입력하는 영역

 > Todo List 컴포넌트 
     - 사용자가 editor를 통해서 입력한 state 값을 받아서 출력 영역

 > Todo Item 컴포넌트
     - 사용자가 Todo List 

 <TodoList 앱의 component 구조>
                 _____   App _________
                 |          |              |   
           Header   TodoEditor  TodoList
                                             |
                                       TodoItem

