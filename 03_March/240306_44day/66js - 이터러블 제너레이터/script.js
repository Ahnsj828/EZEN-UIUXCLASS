// iterable object = 이터러블 객체
// iterable : 순차적인 (사전적 의미), 순서대로 무언가를 처리할 수 있는(개념점 의미)
// "순서"대로 무언가의 연산적업을 처리할 수 있는 객체
// "순서" => index값처럼 순번 할당 값
// 일반객체 => 이터러블 객체라고 할 수없다 (순서가 할당되지 않아서)
// 자바스크립트에서 이터러블 객체 => 문자열, 배열, Map, Set

// 태생이 이터러블 객체가 아닌 요소들은 반복문을 사용할 수 있는 기회가 완전 박탈!!

// 태생이 이터러블 객체가 아니더라도 이 요소들을 이터러블한 속성으로 변경시켜서 반복문을 사용할 수 있도록 하기 위한 목적!!으로 지금 공부할거다

// 이터러블 객체 어떤 속성 & 특징을 알아볼거다

//
//

// interabler Object 특징
// 1) for...of 반복문 사용 가능
// 2) ...전개연산자 구문 사용!
// 3) 구조 분해 할당이 가능하다
//    (객체도 3번 가능하다 but, 1이랑 2는 사용못한다)

//
//
//

// const hi = "hello";
// // hello는 문자열 => 문자열은 이터러블한 객체다
// for (let ch of hi) {
//   console.log(ch); // h // e // ② l // o
// }

// const chArray = [...hi];
// console.log(chArray); // (5) ['h', 'e', 'l', 'l', 'o']
// // ...전개연산자 구문 사용! 해서 배열 할 수 있다

// const [ch1, ch2] = hi;
// console.log(ch1, ch2); // h e

//
//

// const arr = [1, 2, 3, 4, 5];
// console.log(arr);

// 이터러블 하지 않은 객체 및 기타 요소들을 어떠헥 하면 이터러블 하게 만들 수 있을까? 해결책을 찾기 위해서 이터러블 객체의 특징을 확인하고 합니다!!

// const arr01 = new Array();

// 배열, 이터러블한 객체가 되기 위해서!!! 클래스 생성자 함수에는 심볼이 존재하는데, "Symbol.iterator" => 심볼 함수가 존재하기 때문에 배열은 이터러블한 객체가 될 수 있다!!

// 이터러블한 객체가 되기 위해서는 해당 객체에는 반드시 이터레이터 함수를 갖고 있어야 한다!!

// Symbol.interator => nect()

// 유사 배열 => for /
// 유사배열은 next 함수를 갖고 있지 않을 수 있다 => 반복문을 쓸 수 없다

// 이터러블하지 않은 객체를 이터러블한 객체로 변환 시키기 위해서
// => 제너레이터 함수를 사용해야한다
// 객체를 생성하는것 자체 => 생성자함수 혹은 class를 활용해서 프로토타입 => 인스턴스화 하는 구조!

const fnc = () => {
  console.log("1"); //  1
  console.log("2"); //  2
  console.log("3"); //  3
  // 함수가 갖고 있는 기본 속성때매 1다하고 할게 없어서 2를 한거다 / 제너레이터 함수는 아니다
};
fnc();

//
//

// 제너레이터 함수!!
function* gen() {
  yield 1;
  yield 2;
  yield 3;
} //  1  //  2  //  3

// g1 => 제너레이터 객체
let g1 = gen();

//
//

const g2 = gen();

for (let i of g2) {
  console.log(i);
}
