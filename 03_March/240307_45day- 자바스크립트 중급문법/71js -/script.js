// 서버 & 통신
// 1. 왜 필요한가? 이유 설득 & 합리적  => 이게 필요하면 더 잘 습득한다
// html, css, js => 기초 문법 / 예제
//
//
// ToDoList => js의 백미 / js문법이 집약적으로 들어가 있다
// 1) 기본 레이아웃 정렬 문법이 들어가있다
// 2) DOM활용해서 사용자 데이터 값을 수신하는 장치가 들어가 있다
// 3) 의도한 화면 영역에 출력해줘야하는 이벤트가 들어가 있다
// 4) 사용자에게 수신받은 데이터를 저장시키는 기능이 탑재가 되어있다
//   => 그래서 신입들이 포폴에 ToDoList가 들어가 있다 / 단 자신만의 커스터마이징으로
//   => 그래서 ToDoList 이해도가 있어야한다
//
//
// 만약, 용량 큰 데이터를 사용자에게 받아서 처리해야하는 상황이라면?
//
// 팀플 다들 html,css에 하나하나 다 적고 있다
// 어딘가에 문안 & 이미지 & 동영상 호스팅 => 가져다가 사용 가능할까? => 서버 & 통신 이거로 가능할까
//
//
// 서버 : 사용자가 입력한 데이터를 보관.처리하는 웹 상의 가상 공간

// 프론트엔드개발자 : 사용자의 데이터를 수잡하고 / UI 레이아웃 설계 구현

// 풀스택 개발자 of 백엔드개발자 : 서버 구현(서버 구축한다고 부른다) + 데이터 비관계형 & 관계형 데이터 베이스 설계 => 데이터를 사용할 수 있도록 만드는 작업을 한다
//
//
// input => id & pw
// 약속!!을 지켜야지만 서버에게 데이터를 보낼 수도 있고, 가져올 수도 있다
//   => 이걸 서버 통신 이라고한다
//      서버통신은 규약이 존재!! => 프로토콜 : 약속, 규약 => http
// http = hyper text tranfer protocol
// h1태그를 쓰면 heading의 가장큰 사이즈 텍스트를 갖게하자는 등등의 약속
// https:www.naver.com 주소는 네이버에 접속할수 있다
//  앞에 https를 붙여서 접속할수 있다 => 규약.약속을 지켰기 때문에 서버에 접속 할 수 있는거다

// http로 되어있는 주소의 사이트에 가면 => 신뢰할 수 없는 웹 사이트 돌아가세요! 라고 문구가 뜬다
// 아니면 차단되어 있어서 못들어가기도 한다
// s가 안붙어 있어서 그런거다 / s는 기본이다(s는 보안패치) / 무료사이트도 보안패치를 붙여야 배포가된다

// s : security : 보안
// 보안 영역 => 억대연봉 / AI가 발달할 수록 각광받는다
// --------------------------------------------------------------------
// 서버와 통신규약을 지켰다!
// 서버 목적 => 데이터를 가져오던가 or 데이터를 전달하던가(로그인 / 사용자 id,pw 입력해서 정보를 전달)

// method : get => 서버에 특정 데이터를 요청하겠다는 의미!
// method : post => 서버에 특정 데이터를 보내겠다 (주겠다는) 의미!
// -----------------------------------------------------------------------------
// firebase Deploy 파이어베이스에 배포할때 안될때는 404가 항상 나왔다
// 200 : 서버에 정상적으로 자료를 요청했고, 서버 역시 정상적으로 자료를 전송해주었다는 의미
// 404 : 서버에 어떤 데이터를 요청했는데, 그 데이터를 찾지 못할 때 서버가 알려주는 번호!
//   400 || 401 || 403
//   => 401 : 정상적으로 요청하였으나, 권한이 없는 (특정 url통해서 오거나 특정 pw입력해야만 들어갈 수 있는..)
//   => 403 : 권한요청이 없음에도 지속적으로 이 페이지에 접속하고자 할 때
// 503 : 정상적으로 서버에 데이터를 요청했으나, 서버가 정상적으로 작동할 수 없음을 알려주는 번호! => 서버가 다운되었다!!
//       (동시간대에 여러 사람이 접속했을때 / 수강신청할때 / 콘서트 예매할때 등등 / 접속 폭주)
//       코로나 터졌을때 마스크 대란일때 네이버마켓에서 최저가로 판매할때
// -------------------------------------------------------------------------------
// JSON : Javascript Object Notation 의 약자
// 자바스크립트 객체 표기법

// const obj = {
//   title: "title",
//   price: 15000,
// }
// 자바스크립트에서 무언가를 표기하는방법

// 만약!! JS 언어를 그대로 가지고, 서버 구현하고 데이터 베이스를 구축할 수 있다면
//   1) 프론트엔드 개발 VS 백엔드 개발  => 연봉차이가 날 이유가 없다
//   2) 태초에 JS 언어는 => 웹브라우저에서만 사용할 수 있도록 만든 한정적인 제약언어이다!
//   3) 서버 구현 & 저장 데이터 관리할 수 있도록 해주는 언어 => Java & C++ or C# oc C
//     언어 전통적으로 서버에서 사용할 수 있는 언어들!!
//   4) 웹엔앱 ui 영역이 각광을 받은지 얼마 안됐다 / 서버를 중심으로 언어가 측정되었다
//   5) 서버 측 언어에서 => JS언어

// node가 js로 서버를 구현할 수 있게 했다
// js 언어의 인기는 계속 올라갈거다

// js -키값에 절대 ""가 들어가지 않는다
// json - 키값에 ""가 꼭 들어간다

const student = {
  name: "영심이",
  major: "체육교육",
  grade: 3,
};

// JSON.stringify()
// JSON = JSON 형식으로 바꾸고싶어 / 서버가 좋아하는 문자열의 형식으로 / 왜문자열이냐?
// stringify() = JSON에서는 key값이 문자열로 되어있어서
const json = JSON.stringify(student);
console.log(student);
console.log(json);

// 개발자도구가서 치기
// const member = '{"name":"슛돌이", "age":30}'
// const member+obj = JSON.parse(member) 파싱해서 불러오겠다

const json_obj = JSON.parson;

// 서버와 "우리"가 통신한다 = 서버와 클라이언트가 통신규약 아래에서 통신을 한다!!

// AJAX : 클라이언트(우리) & 서버간 통신을 할 수 있도록 해주는 통신 기법
// Asynchronous Javascript And XML
// Asynchronous : 비동기
// Javascript : 웹 사용가능 자바스크립트 언어
// JSON : 언어를 의미하는 것이 아니라, 자바스크립트 언어를 서버가 이해할 수 있도록 변환시켜주는 표기법 / 서버에서 가져온 데이터를 웹브라우저가 이해할 수 있도록 변환시켜주는 표기법
// JSON은 표기법이지 언어는 아니다
// XML : 과거 서버에서 실질적으로 사용할 수 있는 언어

// 동시다발적으로 불러와라
// 동기방식 => 하나 부르고 다음 하나 부르고...
// 앞에 요소가 데이터 용량이 크면 오래걸리는데 비동기는 먼저 준비된 애들부터 데려오는거다
