1. Node.JS를 사용하려면 반드시 로컬컴퓨터에 Node.js가 설치 되어야한다 
최신서버 / 가장 안전성 있는 서버
LTS => 롱텀서비스 
파이어베이스할때 다운받았었다

CMD 가서 확인할 수 있다
C:\Users\EZEN>node -v
v20.14.0
첫번째숫자(20) =>이전버전과 호환이 안될정도로
두번째숫자(14) => 이전버전과 호환이 될정도로 소소한 업데이트
세번째 숫자(0) => 사소하지만 작동안되게끔 만드는 버그를 디버깅한 경우 
  => 높을 수록 안정성 떨어진다

*NPM 자동으로 같이 설치가 된다!!(npm은 내 컴터에 설치되어 있다)

node는 아직 업데이트 할 요소가 많아서 불안정하다

2. Node.JS
Node.js — Run JavaScript Everywhere
웹 브라우저가 읽어들일 수 있는 3대장 : HTML, CSS, JS
JS => 웹 브라우저 밖을 나갈 수 없다
 
3. Google chrome 웹 브라우저
이게 생겨서 JS가 웹브라우저라는 새장 밖으로 나갈 수 있다
V8 검색엔진: JS 코드 웹 브라우저 구현 핵심 역할

4. Game 만들때 / Server만들때 / 등등 모든 프로그래밍할때 => JS 사용할수 있게 됐다 
웹브라우저라는 새장 밖에서 쓸 수있게 한게 Node다

5. Node를 사용하려면 반드시 node를 활성화 시켜줘야 한다!!
 VS에서 cmd에 node입력
  - node 활성화
  - .exit 나오는 명령어

6. Node.js가 전세계적으로 인기다 / 한국에서만..
전세계적으로 인정받을날이 언젠간 올거다 / 우리나라만 느린거다
대한민국 프레임웍은 자바다
전세계적으로 react 인정할때에도 우리나라는 jQuery썼었다
그러다 뒷북으로..

https://www.electronjs.org/
 > 전세계적으로 html, css, js로만 만들어진 웹 & 앱 서비스 소개해주는 사이트
신생기업은 node로 만들어져 있다
많은 기업들이 html, css, js로만 만들어져있다


7. NPM : Node Package Mannager
 > 웹 브라우저 바깥에서 JS를 사용해서 무언가를 만들고자 하는데, 혹시 JS 구현 시, 도움을 받을 수 있는 확장프로그램들이 모여있는 곳!! => ex. 구글 플레이스토어(여러 앱을 다운받을 수 있다 / 애플이나 갤럭시에 내장되어있는게 아니다.)

npm -v    npm 버젼 확인 명령어


8. 서점 & 인강에서 보면
 node는 server다라고 나와있는데! 아니다!!!
server구현,구축하는 기능이 있긴 하지만 server 그 자체는 아니다!!!


9. Node를 배우는 이유 => server를 구축 & 구현 & 활용 하려고
json데이터를 페이크 서버인 
가상화폐데이터 가져올 때 서버를 자체적으로 구현 할 수 없어서 외부 API 데이터를 가져와서 썼었다.
 -  어떻게 만들 수 있는가?


10. express NPM(npm에 express검색) 내 프레임워크를 활용 > 서버!!
 & git-hub 연동!!
 1) 로컬 git
 2) git-hub 연동
   

11. npm 사용하기 위해서 초기화 시켜줘야 한다!!
   > 현재 이 프로젝트에서 어떤 페키지 매니저를 사용하고 있는지 알아야함
   > 정보 (*프로젝트명 / 언어)
   > npm init
   > MIT: 누구나 자유롭게 가져다가 사용할 수 있도록 허용하는 라이센스 판단(가장 많이 사용) / BSD : 자유롭게 가져다가 사용하는 것은 문제가 없으나, 수정 후 재배포를 할경우 =>  반드시 원작자 동의를 얻어야하는 라이센스 개념 / GPL : 제너럴 퍼블릭 라이센스 : 원칙적으로 수정이 불가하나, 원작자의 동의를 얻는다면 허용을 해준다!(*기본적으로 패키지 매니저의 저작권을 보장해주는 라이센스 개념)  => 이 세 라이센스중 하나 쓴다 / 보통은 MIT 쓴다

npx create-react-app .  : 해당 루트 폴더 안에서 프로젝트 생성!!

 3) express (서버를 만들어 주는애)
   얘도 하나의 모듈이다

ls = list 약자
파일들의 목록을 보고 싶을때 사용하는 명령어

dependencies : npm i express   라는 명령어를 사용했따
devDependencies : npm install --save-dev @babel/preset-react 라는 명령어를 사용했다
둘로 나뉘는 가장 큰 이유 => 설치할때 큰 이유가 있다
 => --save-dev 이것의 유무로 차이가 났다
 => 붙고 안 붙고는 =>  실제로 개발.제작한 프로젝트의 기능 구현하는데 있어서 아무 차이도 없다.

*package.json 은 설명서다 => 이 프로그램이 구현되는데 있어서 직접적으로 필요한 NPM / 개발을 하는 엔지니어의 편의성을 위해서 필요한 NPM이냐를 구분해서 보기 위함이다

 => 서로 개발자들의 편의성을 위해서 나눠둔거다

바벨은 개발하는 도중에만 필요한거다
개발이 끝나면 필요가없다
배포할때 굳이 데려갈 필요가없다 =>  데려가봤자 용량만 커지고 사용자가 쓸때 속도가 더디기만 하다
=> 배포할때 데려갈거냐 말거냐 이다

node => 웹브라우저 밖에서 js쓰려고 하는 애다
node 파일명     이렇게 입력하거나   || 명령어를 입력해야한다
그럼 몇백개 써야할 때 매번 입력하고 터미널가서 node 파일명 해야하나?
아니다!!
그걸 해결해주는게  Nodemon이다
업데이트 된걸 알아서 최신문법으로 컴파일링 해주는 애다

*bable 사용하는 이유 : js의 최신 문법으로 자동 컴팡일링 해준다 + 코드를 작성할 때, 일일히 코드 기능 구현 정상적으로 되는지 테스트 하지 않아도 알아서 모니터링을해서 노드에서 구현시켜줄 수 있도록 해주는 nodemon사용!

npm i nodemon --save-dev
노드몬 설치 명령어

