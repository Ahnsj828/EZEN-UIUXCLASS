자료구조
 - 해시테이블 = hash table
   > stack - 입구와 출구가 1개인 자료구조 - 엘베, 설거지
   > queue - 입구와 출구가 별도인 자료구조 - heade와 taile이 있다
                 먼저들어간게 먼저 실행되게
   > deque - 입구, 출구 모드 삭제하거나 추가 할 수 있는 개방형 자료구조

 - 테이블 형식으로 자료를 만든다 (= 행과 열의 구조를 띄고 있다)
 - 행.열 데이터를 하나씩 넣는 구조
    ex) 2002년 월드컵 
        1 이운재
        4 최진철
        20 홍명보
         ... 
          => 테이블 형식으로 만들게 되면 2번 3번은 비어 있다 
            => 인덱스를 비어서 두면 비효율적이다(만들고 사용하지 않아서)
              => 그래서 테이블 형식으로 자료 만드는 방법을 사용한다

*해시테이블
무한하고, 불규칙적으로 나열되어있는 데이터를 한정된 영역안에서 규칙적이고 효율적으로 관리하기 위한 목적으로 탄생된 테이블 형태의 자료 구조다

*해시함수
 해시테이블을 구성하기 위해서 생성된 연산 함수

*해시테이블의 장점
 - 빠른 데이터 읽기 & 삭제 & 삽입

*해시테이블의 단점
 - 기능 효율성을 추구하는데 독립적이지 못하다!!
 - 아무리 해시테이블을 잘 만들어놨어도, 해시함수가 엉성하면 기능의 효율성이 아주 안좋아질 수 있다.

*헤시테이블의 자료구조에서 자주 사용하는 기능!!
 - 테이블에 데이터를 삽입 : add(data)
 - 테이블에 데이터를 체크 : isContain(data)
 - 테이블에 데이터를 제거 : remove(data)
 - 테이블 행 자료를 비우기 :  clear
 - 테이블에 데이터가 비어있는지 체크 : isEmpty( )
 - 테이블에 있는 모든 데이터를 출력 : printAll( )

*특정 자료규조 형태를 만들기 위해서는 class를 활용해서 데이터의 큰 형태를 준비 =해놓고=> 구현!!

 - 셋 = set
 JS Map & Set
 > JS에서 iterable object : 반복 순회할 수 있다
 > for of / forEach / for in
 > Map 규칙 =>이터러블한 객체로 만들어 줄 수 있었다(* .next( ) )
 > Set => 이터러블한 객체로 만들어 줄 수 있었다 (*하지만, 중복되는 값은 허용하지 않는 규칙) => 로또 번호를 Set
 => 해시 테이블 생성 => 중복되어는 key 방지!!



*자료구조 형태
1. stack
2. queue
3. dequeue
4. hashTable
5. hashSet

*알고리즘