*오전 
 - 타입스크립트 (지금까지 40%왔다)
 - 자바스크립트
   > 문법 최소 1번정도는 완벽하게는 아니더라도 공부할 필요가 있다
   > 타입스크립트 문법하면서 자바스크립트 복습
 여기까지가 문법하고 더이상의 문법없다

 (5월3주차까지 TS)
 (5월 4째주 ts, react예제) -> 문법 없이 바로 예제 직행


*오후
 - html, css, js 예제
 - 쉬운 난이도의 TS, React예제
 - FE를 위한 코딩테스트 문항
 - UI/UX 포트폴리오 예제

===================================================

JS 와 TS 활용해서 프로그래밍 코드를 작성
1) 선언형 방식(*함수형)
   > 개발자가 직접 알고리즘 & 매커니즘 고민해서 코드를 커스터마이징해서
      사용하는 방식

2) 명령형 방식 : 우리가 그동안 활용해왔던 방식
   > 기존에 정형화되어있는 문법들을가져다가 사용하는 방식
   > 로우 레벨 방식

  ==> 동일한 결과를 도출해내는데 있어서 선언형 & 명령형 어떻게 차이가 나는지 비교!

  => 자료구조와 알고리즘에 대한 조금의 이해를 할 수 있다
  => 데이터를 배열로 만들어 놓을 수 있고 객체로 만들어 놓을 수 있다
  => 왜, 어떤 경우에 배열? 객체? 


------------------------------------------------------------------------

* 1~100까지의 숫자를 더한 결과값을 도출하는 코드를 작성하려고 한다

 1) 명령형 방식으로
    imperative-sum.ts

 2) 선언형 방식으로
     declarative-sum.ts
     range.ts

  : 결과값을 단순 도출 목적
  : 초고수의 반열에 오르기위해선 선언형 코드를 작성해야한다
     20년차 개발자가 명령형으로 쓰면 무슨 의미냐
 
------------------------------------------------------------------------

* 1~100까지의 숫자가운데 홀수만 찾아서 더한 값 도출

 1) 명령형 방식으로
    imperative-sum.ts
    imperative-odd-sum.ts

 2) 선언형 방식으로
     declarative-sum.ts
     fold
     declarative-odd-sum.ts

------------------------------------------------------------------------

* 1~100까지의 숫자가운데 짝수만 찾아서 더한 값 도출

 1) 명령형 방식으로
    imperative-sum.ts
    imperative-odd-sum.ts
    imperative-even-sum.ts

 2) 선언형 방식으로
     declarative-sum.ts
     filter.ts
     declarative-odd-sum.ts
     declarative-even-sum.ts

------------------------------------------------------------------------

* 1~100까지의 숫자들을 제곱을 한 이후에 더한 값

 1) 명령형 방식으로
    imperative-sum.ts
    imperative-odd-sum.ts
    imperative-even-sum.ts
    imperative-square-sum.ts

 2) 선언형 방식으로
     declarative-sum.ts
     declarative-odd-sum.ts
     declarative-even-sum.ts
      map.ts
     declarative-square-sum.ts
------------------------------------------------------------------------
배열
array-method-chain.ts
filter-odd-even.ts
map-square.ts
------------------------------------------------------------------------

1~10까지의 배열을 완성!!
2개의 새로운 신규배열 생성
  > 1첫번째 배열 : 1~5숫자
  > 2두번째 배열 : 6~10숫자

filter-index.ts

------------------------------------------------------------------------

map-square.ts
선언형방식으로 기존 JS 배열 함수를 사용하는 방법 (*TS로)

------------------------------------------------------------------------
숫자를 문자로
map-number-to-string.ts
------------------------------------------------------------------------
누산기
reduce-sum.ts
------------------------------------------------------------------------
spread-operator.ts
pureSort-test.ts
pureDelete.ts
pureDelete-test.ts
mergeArray.ts
mergeArray-test.ts
tuple.ts
doSomething.ts
iteratable.ts
createRangeIterable.ts



*누구나 처음 낯선 지식을 받아들이면 어려워한다
 > 수강생 누구나 처음만 낯설어하고 어려워할 뿐이지, 자주 접하면 
  > 익숙하게되고 > 쉽게 사용하더라

* 위너 > 힘들고 낯설고, 어렵더라도 하루라도 먼저 빨리 그 문법, 지식을
접하는사람 => 위너
