새폴더 만들기
package-lock.json  package.json   tsconfig.json  복붙
package-lock.json  package.json에 "name": "1_ts", 맞추기
터미널 열기
cmd 열기
npm i 입력

src폴더 만들기
파일 만들기

============================================

프로그래밍 언어 2가지 실행관련 지향 방식
< 실행문 방식 > : c언어 / c++ / c#
개발자가 코드를 입력하면 => 실행만 한다
요즘 컴퓨터 device 매체의 성능이 좋아지기 시작!!
컴퓨터가 처리할 수 있는 능력 한계가 있었다 => 메모리 && cpu 도 발전했다
디바이스 매체가 좋아질 수록 프로그래밍 언어 능력도 올라갔다

< 표현식문 방식 > return을 사용하지 않는다
어떠한 프로그래밍 코드를 실행함과 동시에 값을 반환(*전달)할 수 있는 언어 뒤이어 많이 선보이게 된다
근현대적언어 - JS & TS & python => 얘네가 나올때쯤에는 기술이 발달하고 컴퓨터 사양들이 좋아져서

표현식 VS 표현식문
인강에서 표현식이라는 단어를 사용했다고한다 근데 그 안에 return이 들어갔었다
표현식과 표현식문은 다른거다

< 표현식 >
도출된 결과값을 출력하는 기능까지만 하는 문장

< 표현식문 >
표현식을 통해서 도출된 결과값을 어딘가에 담아서 관리할 수 있는 종합적인 문장?!
a가 b보다 크다면 true 값을 반환, a가 b보다 크지 않면 false 값을 반환
(a: number, b: number): boolean => a > b; 표현식을 통해서 반환될 값이 어딘가에 담겨져 있다


JS에서 콜백함수를 사용했었다 
 - 콜백함수 : JS함수가 1급시민이라 사용할 수 있었다
 - 어떤 타입의 매개변수를 받아올것인지 고민
        / 어떤 타입의 결과값을 반환할지 고민
 - 함수에 매개변수 함수
 - 콜백함수 : 타입


함수안에 콜백함수가 들어올때 타입정리


< 고차함수와 클로저>
"고차함수"는 함수 안에 또 다른 함수를 실행시킨 후 바깥쪽에서 실행된 
결과값을 받아서 내부에서 연산 및 처리작업 후 최종 결과값을 출력할 수 
있도록 하기 위해 고안된 함수

클로저(closure)는 고차함수를 실행시키기 위한 중요한 JS개념
변수 : scope => Global / Local

고차함수에서 수학적 사고 능력!!이 영향을 준다


템프릿 리터럴 => 변수를 문자열로 찾아와서 값을 사용하고자 할 때 / 리터럴 = 문자
리터럴 타입 = 문자 타입
타입 정의 할때 주석 처리했다
숫자 : number, 문자 : string
추론 : "hello" => 타입스크립트에서는 타입정의한다 => 문자다!
변수안에 담기는 vallue값을 가지고 타입을 추론할 때, 리터럴 타입이 작동됐다 라고 얘기한다

타입구조도
가장 높은 타입 => 슈퍼타입 <-> 서브타입

ts에서 객체를 움직일것같다 => interface 사용해라
함수가 나왔다 => 타입별칭 사용해라

표현식문으로
반환해야 할 값이 존재하는데, 굳이 해당 함수의 문법을 표현식문으로 작성해주고 싶은경우, 결과값 부분에 소괄호() 처리를 해서 해당값이 반환값이라는 것을 알려줘야한다

전통적인 함수에서 this 객체가 의미하는것은 => 현재 이벤트가 발생된 요소 이거나 혹은 class함수에서 this객체가 의미하는 것은 => 인스턴스 객체 안에서 어떤 키를 지칭하고자 할 때 => this객체를 사용한다

this객체는 화살표 함수에서는 사용불가!!
사용을 하면 코드가 멈추는가?
no! this객체가 가르키는 것이 window객체이기 때문에 원하는 결과값이 나올 수 없다


종합병원 General Hospital => General : 종합적인
제네릭 (*generics) 타입 : 종합적인 타입!!
   왜 종합적인 타입이 필요한가? 
     > 배열의 타입을 정의하는데, 배열안에 들어가야하는 타입이 
        1가지의 종류가 아닌경우, 그리고 배열내 들어가야하는 타입의 
        형태가 반환되는 경우
  제네릭 타입은 꼭 배열에만 쓰여야 하는것은 아니다!!  
  함수에서도 사용이 가능하다!


타입변수 => 아직 자료의 형태가 결정되지 않은경우, 일단 변수를 통해서 타입의 자리에 임시적으로 놓는 것을 의미!
타입변수는 보통 T로 작성 / 타입변수는  다른 알파벳써도 되지만 관례적으로 T라고 쓴다
문장 안에 타입변수가 작성되었다는 선언!!



