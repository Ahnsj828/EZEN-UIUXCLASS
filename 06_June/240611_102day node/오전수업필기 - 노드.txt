*node.js
0) babel & nodemon 설치
  - bable : node에는 2가지의 module이 있다 -> cjs / esm => js 데이터 모듈로서 가져오고자 할 때 방법 상이 / 화살표함수 등 => bable이 가장 최신 js문법으로 컴파일링 해주는 역할

 - nodemon : node monitor (*js파일 업데이트 해주거나 사용자 특정 url 접속 하게 하는 역할) => 에러 메시지 혹은 콘솔데이터 node 명령어를 입력하지 않아도 알아서 변경되고있는 

1) Server를 구현 목적

2) Client 존재 이해

3) User <-> Client(*웹브라우저) <-> Server

------------------------------ 개념

4) Server는 어떻게 생성하는가?
  -  express라는 framework를 사용했다
  
5) server는 client의 요청을 들어야 한다
 - app.listen( ) : 어떤 포트를 통해서 client가 무언가를 요청하는지 확인 할 수 있었다! / callback 함수를 통해서 client요청 확인 후 실행!
 - 첫번째 인자 포트 넘버 , 두번째 인자 콜백함수

6) Page Routing : 복수의 페이지를 가지고 있는 홈페이지 서비스를 구현한다면 => 각각의 페이지마다 url에 client가 접속하게 되었을 때, 웹 브라우저 화면 내용 출력!

 > Global Routing 
   20~ 30개 url 개별적 & 독립적
   main 판단되는 동적 파라미터를 공통 + 추가 파라미터를 입력
 
 > middleware(*컨셉 개념)
   서버화 되어있는 객체에 use( ) 함수를 

 > method : get, post
   사용자가 단순히 특정 페이지에 접속했을 때, 실행 : get
   사용자가 어떤 값을 입력해서 입력한 값으로 data를 수정하거나 업데이트를 하고자 할 때에는 : post

 > get & post를 한번에 작성할 수 있도록 해주는 route( ) => get & post  메서드 함수를 체이닝기법으로 사용할 수 있도록

> express.urlencoded( ) : form 태그에서 특정 값을 입력했을 때, 그 값을 객체의 형태 구조로  


===============================================

DB 생성 & 관리

특정 데이터를 수정!!

특정 데이터를 업로드!!

데이터 추가 액션을 해줄 영역이 필요하다(ex.추가버튼)


몽고DB
2009년에 출시됐다
당시에 DB 구조화 심플 & 단순화
>비관계형 데이터베이스 구조

네이버 회원 DB 와 네이버 블로그 DB는 관계형 데이터페이스 구조다
만약 비관계형 데이터라면 블로그 DB에 네이버 회원 DB까지 갖고있어야하니 비효율적이다

관계형 데이터베이스 구조 특화 전문 DB플랫폼 -> MySQL
다른 플랫폼들도 관계형  DB로 하다 망했다 (MySQL을 못따라간다)

몽고 DB는 꿋꿋이 비관계형 데이터베이스 구조로 남았다

시간이 지나고 관계형 데이터베이스 구조의 단점들이 나왔다 => 대용량의 데이터 등등.. 소규모 프로젝트, 공부용으로는 비관계형 데이터베이스 구조가 필요했다 => 몽고DB가 각광받는다

또한, 몽고 DB가 js,node에 좋다 =>  몽고DB는 JSON과 같은 동적 스키마형 도큐먼트들(몽고DB는 이러한 포맷을 BSON이라 부름)을 선호함에 따라 전통적인 테이블 기반 관계형 데이터베이스 구조의 사용을 삼간다.(위키백과)

몽고DB는 일종의 구조다
데이터 작성하고 

node.js에서 서버를 만들고 구조화 되어 있는 DB가 필요해서 몽고 DB를 쓰는거다
node.js는 서버 /  몽고 DB는 DB => 둘사이에 공통점인 js를 기반으로 하면서 서버화 하며 DB구조를 하는 매개체(번역가)가 필요하다 => 그게 Mongoose다

몽고 DB를 설치하고 Mongoose를 불러와야한다

MonggoDB 2가지!!
 - 사이트에서 나온 방법
 - node.js => npm
   window => package manager  => chocolatey 
   굳이 불필요하게 다운받지 않게 하려고
   PowerShell: 윈도우 전용 터미널

choco install mongodb-compass
choco install mongodb-shell

mongosh - 몽고db로 들어가겠다는 명령어다
(node.js설치하고 node쳤을때랑 같은 느낌이라 생각하면된다)


 mongodb://127.0.0.1:27017   => 포트 문

powershell => 관리자로 실행 => mongosh 입력 => 여기서 여러 데이터를 확인할 수 있다

crud

MongoDB
 -> 1) 사용자가 어떤 value 입력하는지
 -> 2) 데이터의 형태를 기록하고 저장해야한다 = 스키마(schema) 기록.저장

Server.js 기능분리
> 서버가 오픈 되는 기능
> 서버가 DB를 찿아오는 기능
  => 이렇게 둘로 분리할거다

callback함수를 활용해서 mongoDB 데이터를 찾아 올수 있었는데,

promise를 활용해서 데이터를 찾아올 수 있도록 바뀌었다
(*더이사 mongoDB 사용하지말라는 말에 반박할 수 있다)

async & await => react에서 외부 api가져올 때 사용했었다
async가 붙으면 비동기다
외부 api를 가져올때는 항시 비동기처리해야한다
(외부데이터가 안와도 화면ui는 출력하기위해서 비동기 처리했다)
