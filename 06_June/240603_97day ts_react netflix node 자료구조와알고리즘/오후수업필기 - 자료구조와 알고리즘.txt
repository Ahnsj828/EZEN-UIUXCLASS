알고리즘
 (*배열에 무작위로 섞인 숫자를 정렬하는 방법들 중 하나)
 [4, 2, 3, 1]

어떻게 정렬할거냐에 따라 나뉜다 
 - 버블정렬
    > 배열안에 있는 숫자들 가운데, 앞에 있는 숫자와 뒤에 있는 숫자를 비교해서 자리를 바꾸는 알고리즘을 의미한다
    > 버블이 일어나는 것 같다고 이야기를 하기 때문에 버블 정렬이라고 부른다.
   ex) 낮은 숫자대로 정렬한다 
        [4, 2, 3, 1] 에서 4와 2를 비교해서 작은애를 앞으로 보낸다
        [2, 4, 3, 1]
        [2, 3, 4, 1]
        [2, 3, 1, 4]
        [2, 1, 3, 4]
        [1, 2, 3, 4]
 
 - 선택정렬
    > 배열안에 정렬되지 않은 영역의 첫 번째 아이템을 시작으로 마지막 아이템까지 비교한 후에 가장 작은 값을 첫번째 아이템으로 가져오는 정렬

 - 삽입정렬
     > 선택정렬이랑 비슷하다
     > 배열을 2개의 그룹으로 분리시킨다
     > 1 그룹 :  정렬된 영역으로 나눈다 
     > 2 그룹 : 정렬되지 않은 영역으로 나눈다
     > 모두가 정렬이 되어질 수 있도록 만들어주는 정렬

 - 병합정렬
     > 쌤이 수업 초반에 slack을 통해서 divide & conquer 라는 영어를 기억해라 라는걸 보낸적 있었다
     > 해결하기 힘든 문제가 발생하면 이것을 한 번에 해결하려고 하지 말고, 나눠서 해결해라!!
     > 8개의 아이템을 갖은 배열이 있는데 시간이 오래걸리면 ->  4개배열과 4개배열로 나누고 각 배열마다 정렬하고  -> 쪼갠 배열끼리 재 배열하고 병합
 [3, 5, 2, 4, 1, 7, 8, 6]을 넷넷 나누기 =>  [3, 5, 2, 4]  [1, 7, 8, 6] 
   => 또 나누기 [3, 5] [2, 4] [1, 7] [8, 6]
    => [35 24] [17 86]
      => [1, 2, 3, 4, 5, 6, 7, 8, 9]
      최종적으로 다시 합친다

 [2, 3, 4, 5, 1, 6, 7, 8]   2 lefting index 8 righting index 5 middleindex
   [2, 3, 4, 5]  => left area index
   [1, 6, 7, 8]  => right area index
   임시 빈 배열 => [ ] temp Arr
 left area index와 right area index를 비교해서 상대적으로 작은애들을 emp Arr에 넣었다
 [1, 2, 3, 4, 5, 6, 7, 8] temp arr

 - 퀵정렬

배열을 활용해서 배열안의 자료들을 어떻게 정렬할건가

