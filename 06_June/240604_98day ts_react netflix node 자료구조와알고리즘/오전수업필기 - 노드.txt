  "devDependencies": {
    "@babel/cli": "^7.24.6",
    "@babel/core": "^7.24.6",
    "@babel/node": "^7.24.6",
    "@babel/preset-env": "^7.24.6",
    "@babel/preset-react": "^7.24.6",
    "nodemon": "^3.1.2"
  }
=> 배포할때는 가져가지 않을 거다

----------------------------------------------------------------------

*데이터통신

Server <->  Client
 Server = 항상 켜져있는 꺼지지 않는 창고 혹은 24시편의점
  > 항상 Client의 요청.요구사항 귀 기울이고 있어야한다
  > Listening할 준비가 되어있어야한다
  > 실행시켜야한다
  > Node는 JS기반으로 움직이고 있다
  
사용자는 웹브라우저라는 매개체를 활용해서 특정 브랜드 및 서비스 제품의 데이터를 요청!!!

웹 브라우저 > 사용자를 대신해서 서버에 요청을 한다!! = Client 클라이언트
네이버가 client가 된다

클라이언트가 나이키 서버한테 어떤 reques(요청)
url을 줬다(매칭된 데이터를 줬다) 

request, response = 매개변수
대부분의 사람들이  req(= request), res(= response) 라고 쓴다 
이름은 바껴도 되는데 순서는 바뀌면 안된다

서버를 구현할 때에 컨셉!!
 - redux : 미들웨어 컨셉이라고 했다 (하드웨어와 소프트웨어 사이라서)
여기서도 미들웨어 개념을 탑제할 수 있다


1) client & request

2) 미들웨어 (*next( ))

3) 파이널웨어 (*출력)

*app.get( ) : client request가 존재한다면, 미들웨어, 파이널웨어 실행
*app.use( ) : global 미들웨어 => 어떤 URL에서든지간에 작동이 가능한 미들웨어!!!
 > 전역요소의 미들웨어를 만들어서 사용할 때에는 반드시 get( )보다 먼저 실행시켜야한다
> 로그인여부 체크 / 사용자 조건 체크!
> 복수의 다양한 미들웨어를 동시에 실행!!!
> 미들웨어 중에서 기존에 이미 만들어진 미들웨어를 가져다가 사용할 수 있다! (*미들웨어를 통해서 확인할 수 있는 client 정보가 워낙 다양하다 보니까)
> morgan 



페이지 라우팅!!! (라우팅= 경로 / 어딘가로 도착하기 위한 경로)
 - react 프로젝트 : todolist / 감정일기장(페이지 라우팅배웠었다)
 - 만들어내야할 페이지 개수가 많지 않았다 / REST API를 사용할 필요없다
   페이지를 기획하기(페이지가 많을때 사용)위한 구현을 해본적 있냐

* 라우터 vs 컨트롤러

*export default VS export

1) 파일에서 출력가능한 파일 개수를 정의
2) export default : import해오는 파일에서 파일명 수정!!!
3) export : import해오는 파일에서 절대 파일명 수정 불가!!!
 > import를 해오는 공간에서 중괄호를 감싸안아서 가져옴!!
   (리액트 훅 가져올때  => imprt { } froma " "  => 이렇게 중괄호 사용 한 적 있다)

Node.js에서 페이지 Router는 url에 접촉하기 위한 일종의 포털(관문)
