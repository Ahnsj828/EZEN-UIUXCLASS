// < 삽입정렬 >
// [1, 4, 5, 3, 6, 2]
// 최초의 배열을 가지고
// [1, 4, 5, 3, 6, 2] 정렬되지 않은 상태  4, 5, 3, 6, 2와 정렬된 상태 1와 비교
// [1, 4, 5, 3, 6, 2] 정렬되지 않은 상태  5, 3, 6, 2와 정렬된 상태 1, 4와 비교
// [1, 4, 5, 3, 6, 2] 정렬되지 않은 상태  3, 6, 2와 정렬된 상태 1, 4, 5와 비교
// [1, 3, 4, 5, 6, 2] 정렬되지 않은 상태  6, 2와 정렬된 상태 1, 3, 4, 5와 비교
// ...
// [1, 2, 3, 4, 5, 6]
// 정렬이 완료된 곳에 삽입한다

const arr = [4, 1, 5, 3, 6, 2];

// i = 1, 2, 3, 4, 5
//  i = 1일때 / j = 0
//  i = 2일때 / j = 1, 0
//  i = 3일때 / j = 2, 1, 0
//  i = 4일때 / j = 3, 2, 1, 0
//  i = 5일때 / j = 4, 3, 2, 1, 0

const inserttionSort = (arr) => {
  for (let i = 1; i < arr.length; i++) {
    // 첫번째 그룹은 정렬이 되었다는 가정하에 시작하는거라 1부터 시작
    let insertionData = arr[i];
    let j;
    for (j = i - 1; j >= 0; j--) {
      // 0이 될때까지 작아질거다
      if (arr[j] > insertionData) {
        // 4가 1보다 크다면 자리를 바꿔야한다
        arr[j + 1] = arr[j];
      } else {
        break;
      }
    }

    arr[j + 1] = insertionData;
  }
};

console.log("=== 정렬 전 ===");
console.log(arr); //   [ 4, 1, 5, 3, 6, 2 ]

inserttionSort(arr);

console.log("=== 정렬 후 ===");
console.log(arr); //  [ 1, 2, 3, 4, 5, 6 ]  => 등차수열 형식을 띄고 있다 => 효율이 좋지 않다
//  시간복잡도 => o(n2)
