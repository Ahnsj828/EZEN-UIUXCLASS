``mac유저 그림판이 없을때 좌표값 찾는거
``사진에서 좦 찾는거 윈도우에서
*mac 유저 : 그림팜 => 이미지 맵 / 좌표
*google : image map generator

   window + r  -r  웜타입?

*주중 학습 내용 => 주말 복습 안된다
*주중 학습 내용 => 주중 복습 /주말 리프레쉬
*6개월 시간 => 아주, 매우 고통스러운 것이 정상
``2~3년 배울거를 6개월만에 배워야한다
``부트캠프 모두 개거품문다

html 태그 : input 태그
- 신입 / 초급 
``신입 초급한테 input이 중요하다
- 입사 => 실무 프로젝트에 바로 투입 안된다
(*기존 프로젝트 작업물 연습하는 시간을 갖는다 =>PM 이 시킨다)
(*input / nav / toogle)인풋 네비게이션 토글
(*회원가입 / 로그인 => input) 회원가입 로그인 모두 인풋을 사용한다


form : table (*바같에 커버)
>input : 속성 화면이 달라짐
 ex)input type="password" 
text / password / email / firle / submit
checkbox / radio /
rage / week / time / month 

``form태그는 input태그가 들어갈 테두리 
``로그인 버튼에서 아이디입력 비밀번호 입력이 input


>textarea : 리뷰 및 댓글창 등을 생성하고자 할 때
 댓글 창들

> select / option 는 UL / li 관계처럼 둘이 같이 쓰인다
 :  어떤 옵션을 선택하도록 하고자 할 때 사용할 수 있는 태그
form태그 안에는 id pw가 꼭 붙는다

> optgroup / option = 옵션을 그룹핑하고자 할 때 사용하는 태그

>fieldset / legend 둘이 같이 사용 = form 태그를 스타일링하는 역할

1.아이디 & 패스워드 입력 후 로그인 버튼 클릭
2.입력된 아이디 & 패스워드를 찾아서 매칭된 정보를 가져와야 로그인이 된다.
3.사용자가 입력한 아이디 & 패스워드 정보를 "서버"에서 가져올 수 있어야 매칭이라는 행위


``아이디 비번을 입력해서 로그인 버튼 누르는것 까지 - 프론트
``로그인 버튼 후 값이 서버로 전달 될 수있게, 맞는지 아닌지 정보를 가져오게 - 백엔드

``input과 form 은 백과 관련이 깊다
``form과 action이 붙어나온다 
                             ----이게 cs다
*cs (*computer science = 컴퓨터 공학)

`` http://localhost:3000/process_login" method="post"
                          이 링크로                                          
   get방식 - http://localhost:3000/process_login?id=ahn    쿼리값만 찾으면 된다 / 처리속도가 빠르다 /코드 간단
   post방식- http://localhost:3000/process_login             get보다는 복잡   

`` https://search.naver.com/search.naver?where=nexearch&sm=top_hty&fbm=0&ie=utf8&query=nike
  프로토컬 네이버치url          ?는 쿼리 질문하다                                                           
  나이키를 찾아줘 이뜻이다.
  아디다스 찾을거면 뒤에 나이키 지우고 아디다스 치면된다
 어떤 방식으로 되는지 패턴을 찾으면 

``라벨을 안 써도 작동은 된다 라벨은 인풋
``id는 명시적으로 직관적을 써야된다 / 작명을 잘해야한다
``id값을 주기 위한 input이란걸 알아야한다

*퍼블리셔는 이런 작업 하지않는다. 



html1
html1
html1
html4 => xml문법 (x-extensible) - 홑태그 나옴 / 홑태그가 멀티태그와 동일한 효과 및 성능을 낼 수있다라는 부분을 시각적으로 표현해주자 <홑태그/> 
html5

프리티어 덕분에 /가 없어도 작동된다
프리티어가 알아서 html 규격에 맞게 변경해준다 
처음에는 프리티어가 없는 상태에서 정석적인 문법을 아는게 좋다


value는 태그에 들어가는 속성값이다
태그들은 css스타일로 효과를 줘야한다
value같은 부속성?들은 css스타일로 효과를 안줘도 된다.


-------------------------------------

 HTML : Hyper Text Markup Language
> 사람의 뼈 / 건물 구조
``5까지 나옴

 CSS : Cascading Style Sheet (스타일을 주는 장치다 / 언어라부르지 않는다) markup이 안들어갔다
>Cascading : 폭포수(*CSS 부모요소에 적용한 스타일요소 => 자식요소에 해당 스타일 "상속"받음)
``부모요소가 스타일주면 자식요소들도 자연스레 스타일이 들어간다
``3까지 나옴 - 3부터 애니메이션 기능이 된다

css를 html에 코드를 연결해야된다


스타일 저용하는 방법
1)인라인스타일(0.1%)
2)내부 스타일(거의없음)
3)외부 스타일(99.9%)

>이유- 코드를 작성할 때, 1개의 단일 파일안에 가급적 최소한의 정보를 담으려고 하는 노력 (*기본적인 마인드 => 디자이너, 퍼블리셔, 개발자)

> if, 1개의 단일 파일이 각 기능에 따라서 분할되어 있었더라면 => check/ ex. 이 문제가 A파일/ B파일 문제
>버그(bug) =>내가 작성하거나 만든 프로젝트 코드 및 프로그래밍 언어 의도치 않은 문제 발생

>디버깅(de buging) => 버그를 찾아서 해결하는 행위
버그 잡는 것
프로그래밍 언어가 돌아가고 있는 상황에서 하는거 (팀프로젝트에서는 붙이지않는다)

>트러블슈팅(trouble shooting) =>버그 뿐만 아니라, 현재 작동되고 있는 서비스에서 보다 효율적으로 무언가를 개선하는 행위

>트러블슈팅을 전문으로 하는 사람 = touble shooter
(*공고 : 트러블슈팅 경험이 많은 사람)
(*면접 :  국비수업할때 팀플할때 트러블슈팅한 경험 있나요? 라고 물어본다 코드를 작성하고 커스터마이징 할때 )
코드 끝나고 -개선할수 있는지 찾는거 

상대경로 /절대경로
상대경로 : 현재 내가 작업중인 폴더를 기준으로 경로를 찾아오는 것
 ex)href="./style.css"
절대경로 : 내가 작업중인 폴더가 아니라 root folder 를 기준으로 경로를 찾아오는것
 실무에서는 대부분 상대경로로 
 ex)href="/style.css"

--------------------------------------------------------------------------

*html tag를 작성하는데 있어서 모든 태가그ㅏ 똑같이 작동하지 않고 
있다! 눈썰미!

a 태그 / h 태그 등등 - 기능적으로 태그로 분류한거다 
*html 태그는 크게 2가지 부류로 나눠서 생각해볼 수 있다.
(공식적으로)

1)block Tag
-현재 위치한 영역의 한 줄(가로를 의미 = 즉 행을 의미)을 전체 사용한다 
ex. h(n) div, fieldset, form, hr(줄을그으면 한 줄 다써서), p, ul, ol, li (하나의 리스트가 한 줄을 다써서) 

2)inline Tag
-현재 해당 태그가 위치한 그 영역의 한 줄을 다른 인라인 태그들과 공유해서 사용한다
ex. img, a, br, button, label, span, textarea

``블락은 한줄이라는 구역이 정해져있다 / 인라인은 구역이 정해져있지 않아서 가운데라고 정해주면 작동이 안된다

id -하나만 효과
class - 복수의 몇개에게 동일한 효과를 주고싶을때 

인라인을 블락으로 변경해서 사용하고싶을때
1.인라인을 블락으로 감싸안아서 사용 가능
2.인라인 자체를 성격을 바꾸는것
 div로 감싸서
네이버에보면 div로 한게 많다
이건 네이버만 한게 아니다  대부분의 웹사이트들이 이렇게 되어있다