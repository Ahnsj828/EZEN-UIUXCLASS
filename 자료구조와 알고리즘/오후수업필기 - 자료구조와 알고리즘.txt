*자료구조 :
 데이터가 어떤 구조로 저장되고 어떻게 사용되는지를 나타내는 일련의 과정 및 결과물
  > 로또번호 추첨기 프로그램을 개발하려고 한다
  > 로또번호를 랜덤으로 생성
  > 변수 담아서
      => 어디에 담을지, 이를통한 최종 결과물 등등

*알고리즘 :
 어떤 문제를 해결하기 위한 최고 및 최선의 효율적인 방법 혹은 방법론

=> 그래서 둘이 같이 사용될 수 밖에 없다


*시간복잡도
 - 어떠한 문제를 해결해나가는데 걸리는 소요시간 (짧으면 짧을수록 시간복잡도 계산)
 - 만약 두사람이 동시에 반복문을 똑같이 썼는데 
   for문을 쓴사람도 있고 for of문을 쓴사람, while문 쓴사람..
   과연 그중 누가 알고리즘을 알고 효율적으로 쓴사람인지 판단하나? => 시간복잡도로
 - 시간복잡도 계산 할 수 있다 => 터미널에 입력해서 값을 받을수 있다 (10초, 3초, 0.3초 등등)


*어떻게 계산?
 arr = [1, 3, 5, 7]   (9미만 홀수)
  => 미션, 주어진 배열에서 5를 찾으세요!!

 1) 가장 빨리찾는방법 => 한번에 직접 찾는방법                  => 가장 좋은 방법
 2) 반복문 사용해서 찾는 방법 : 1~7 순회하면서 찾는방법      => 중간 방법
 3) 가장 안좋은 방법 => 1, 3, 7, 찾고 마지막에 5 찾는 방법    => 가장 안 좋은 방법
    (*배열의 길이 수 만큼 시간이 걸리는 방법)

   => 가장  시간이 많이 걸리는 상황을 전제하에 시간 복잡도를 계산

가장 빨리찾는방법같은경우는 컴퓨터의 성능에 따라 다르게 나온다
  => 컴퓨터 하드웨어에 따라 성능이 좋으면 더 빨리 끝난다

   가장 안좋은 방법을 기준으로 잡는다 => 이걸 시간복잡도라 한다



*시간 복잡도의 단위!!
 - 빅오메가 : 최선의 경우, 한번에 찾을때를 의미
 - 빅세타 : 평군의 경우, 배열의 길이 중간 만큼 시간이 걸리는 것을 의미
 - 빅오 : 최악의 경우, 배열의 길이만큼 시간이 걸리는 것을 의미(단위)

짠 코드를 실행하는데 가장 오래걸리는 시간 => 시간복잡도 
단위는 빅오
최상의 빅오, 최악의 빅오 로 나뉜다


프로그래밍 영역에서는 시간이 가장 오래걸릴 것으로 판단되는 그 구간을 발췌해서 
그 구간에 대한 시간복잡도를 계산한다
 => 정상적인 결과값을 도출하는데 걸리는 시간이 나온다

시간이 가장 오래걸리는 구간은?
 - 자바스크립트를 잘한다는 말은 무슨 이야기?
    => 배열과 반복문을 내가 자유롭게 가지고 놀 수 있으면 그런 말을 듣는다
 => 모든 프로그래밍 언어는 다 저마다 반복문이 있다
 => 사람이 일일히 비효율적으로 작업해야하는 단수 반복적인 행위를 컴퓨터에게 맡김으로
      인해서 프로그래밍 효율성 극대화!
 ex) 뭔가 서칭할 때 내가 찾는것보다 gpt한테 맡긴다 => 이유 : 내가 찾는것보다 gpt가 빨라서
       => 찾는 반복..



*이터러블 객체가 구현하는 실행시간!!
  > 자료구조 & 알고리즘
  > 반복문


*그렇다면, 자료구조 & 알고리즘 반복문 잘쓰기 경연대회인가?
  => NO!
  > 지금 반복문을 써야될 타이밍인가? 아닌가? 
  > 반복문을 사용하지 않고 효율적인 코드를 작성하려면?
  - 연결리스트!!! 개념


*반복문을 사용한다는 것 => 이터러블 객체를 사용한다는것 => 배열을 쓴다

*JS는 좋게 말하면 유연성 있고 / 안좋게 말하면 근본이 없다

*배열 : Java / C / Python등등 에는 배열이 있다
 배열을 정의할 때, 사전에 배열안에 몇개의 아이템이 들어가게 할지 결정을 짓는다!!

단 한번도 JS배열을 사용할 때, 안에 아이템 10개 넣을거야 라고 정의한적 없다!!

JS에서 배열은 살짝 예외적인 상황이나, 배열의 경우에는 불편함이 있다
사전에 데이터에 대한 개수를 결정 =>  데이터를 추가하거나 삭제하거나 불편이 있다

배열의 장점 => 참조타입이다(*주소 참조)  <->  원조타입 => 숫자 문자 불리언
값이 100개 1000개를 담든 다 찾아 올 수 있다
  => 데이터를 찾아오는 것이 매우 효율적 = 데이터를 읽고 사용하는 것이 매우 신속.정확하다


배열을 쓸지 말지 정하는것
*내가 지금 프로그래밍 코드를 작성하는데 있어서 데이터를 주기적으로 & 반복적으로 
생성, 삭제하는 편집요소의 기능이 많이 사용!! => 배열 안쓴다 , 연결리스트 o

*만약, 데이터를 불러오거나 읽는 기능이 주된 기능의 프로그래밍 코드 작성 
  => 배열지향!!, 연결리스트 x

* 배열 대체하는 연결리스트는 뭔가?
  > 배열이 아니다
  > 배열과 유사한 기능 구현할 수 있다!!
  > 각각의 고유한 값을 독립적으로 생성해주고, 이들을 서로 연결시켜주는 자료구조 형태!!
     => 배열같은 느낌으로 만든다


*연결리스트를 활용해서 구현할 수 있는 기능 및 연산작업을 하나씩!
 > 추상 자료형!!
👇🏼
1) 연결리스트의 모든 데이터를 출력기능
    > printAll( )

2) 연결리스트의 모든 데이터를 제거기능
    > clear( )

3) 연결리스트 내 인덱스를 삽입 기능
    > insertAt( index, data )
                  (어디에 넣을지 , 어떤거를 넣을지)

4) 연결리스트 내 인덱스를 삭제 기능
    > deleteAt( index )

5) 연결리스트 내 익덱스를 읽는 기능
    > getNodeAt( index )

6) 연결리스트 내 익덱스를 마지막에 삽입하는 기능
    > insertLast( index )

7) 연결리스트 내 익덱스를 마지막에서 삭제하는 기능
    > deleteLast( index )

 => 배열과 비슷하다



모듈이 있기때문에 js파일끼리 서로 주고받고할 수 있다
cjs냐 ems냐 
html이 있었을때는 module을 했었다
html없이 자바스크립트 파일끼리 서로 주고받을거다

.mjs => 모듈화 된 자바스크립트 할거야



*연결리스트 배운다음에 => Stack & Call 배울거다

*시간복잡도 배울거다
