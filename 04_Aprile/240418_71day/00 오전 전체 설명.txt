프론트엔드 질문 => 우리가 작업하는 결과물이 어디로 가며, 문제가 발생했을 때 왜 안되는 것 인가?
사용자의 눈에 보여지는 영역을 기획.개발.작업 하는 영역이다

질문1) 공공데이터포털에서 데이터를 가져와서 작업하고 배포하는데 안돈다
         보안상의 어떤 요소들로 인해 안된다
질문2) API가 뭐냐
질문3) 쿼리스트링은 뭐고 파라미터는 뭐냐?
  => 공통된곳에서 파생된 질문들이다

프론트엔드 개발자가 알고있으면 좋지만 다루진 않는내용들
👇🏼
html5를 활용해서 사용자에게 아이디값, 이메일 등의 정보를 취합하고싶을때
가장 쉽게 사용자의 정보를 수집하는 방법 => form태그 > input태그 
그래서 신입으로 들어가면 form태그를 많이 다루는게 form태그다

1) 사용자 아이디, 이메일, 연락처 등 독립화 된 자료들을 => Data(데이터)라고 부른다
     독립적인 자료다 / 이메일 하나 / 전화번호 하나 / 사용자한테 받는것들을 데이터라고한다
2) 데이터들을 한곳에 그룹화해서 관리해야할때 => Data Base(DB 데이터베이스)
   이런 여러 데이터들을 모은것을 DB라고한다 / 독립적인 자료를 그룹화한 것
3) 백엔드영역에서 DBMS라고 있다 => Data Base Management System
    초기에 사용자한테 데이터를 받는데 한계가 있었다 / 인터넷이 느려서
    나중에 사용자들한테 받는 데이터들이 많아졌다
    아날로그시대때 천리안 그런 느린 인터넷이있었다
   - 요즘 포털사이트 : 옛날처럼 검색기능만 있는게 아니다 / 메일, 지식인, 쇼핑, 뮤직....
   - A라는 사람은 네이버만 사용(뮤직, 메일 등등) || B라는 사람은 쿠팡만 사용하고 네이버는 메일만사요
     => 이사람들의 연계적 관리하는게 좋을까? 독립적으로 관리하는게 좋을까?
   - 관계형 DB / 비관계형 DB
     관계형 DB = 종합적으로 관리 / A같은사람
       관계형 DB 관리할때 구축하는 서비스 => MySQL , Oracle
       관계형 DB 관리할때 프론트엔드에서 사용하는 프레임웍 => Django , Express
     비관계형 DB = 서비스를 간헐적으로 사용하는사람 / B같은 사람
       비관계형 DB 관리할때 구축하는 서비스 => SQL 등등
4) API : Application Programming Interface
   추상적 개념이다
   Application = 소프트웨어 / 프로그램이다 / 어떤 게임들 / 포토샵등등 / 어떤 기능을 갖는 단일 프로그램
         아주작고 간소한 소프트웨어
   Programming html, react...등등을 사용해서 소프트웨어로 프로그래밍 하는..
   Interface = 경계면을 의미한다
      UI = user Interface 웹브라우저에서 사용자가 보는 화면을 기획하는거
    사용자와 만드는 우리를 만나는 경계면이 interface다

   날씨관련 정보를 인프라 / 
   기상청(openweathermap)에서 만든거 날씨 정보를 가져다쓰는거

   사용자와 프로그램을 우리가 만나는 사이의 경계면을 만드는 
   소프트웨어를 프로그래밍 하는...

   API Data : API의 기능을 가미한 Data
     API는 명사보다는 동사다 
      API 매개체 역할을한다 
   API Data : 이쪽에서 만들어놓은 데이터를 받아서 저쪽에서 사용할 수 있게끔 만드는 매개체 역할을 하는 데이터



< 서버 & 클라이언트 >
*서버  
  =>어딘가에 하드웨어 형태로 데이터를 포함함 DB를 담고있는 물리적인공간
  =>데이터를 갖고있는 DB를 축척해놓은 저장해놓은 하드웨어라고 보면된다
  => 네이버가 가지고있는 물리적인 DB공간
옛날에는 서버실이 있었다
AWS라는 가상의 웹상에서의 공간에서도 서버를 돌릴 수 있게 하는 방식을 바꿨다 / 단 해킹에 취약하다
요즘에는 AWS라는 호스팅 서비스가 많아졌다(장점이 커졌다)
요즘은 하드웨어 서비스가 줄어들고 클라우드같은 서버가 늘고있다

*클라이언트 
우린 유저다 
  유저 : 클라이언트를 사용하는 사용자
우린 네이버나 구글이나 중간에 있는 포털사이트/ 웹사이트 한테 요청하는데 
=> 네이버 포털사이트

URL기반으로 요청하게 되어있다 
URL기반으로 원하는 정보를 달라고 요청하는거다(네이버사이트에서 나이키 검색같은..)
https://search.naver.com/search.naver?
where=nexearch&sm=top_hty&fbm=0&ie=utf8&query=nike


1. URL시작은 반드시 프로토콜로 시작한다
프로토콜 :  통신규약 => http

2. 
이젠 DB가 돈이 되는 시대다
우리의 개인정보하나가 중국으로 넘어가면 800~1000원정도 될정도다
그래서 보안패치가 설치될 필요가 생겼다 => s => https
http인 뒤에 s 안붙은 웹브라우저들을 구글이나 애플들이 다 막기 시작했다
그런 페이지들은 보안상으로 접속할 수 없다고 나온다

3.
ex) 구글이 제공한 가상의 공간에 우리가 포스팅할 수 있게 하는 파이어베이스 프로그램에서
 뒤에 s 안붙으면 못만들게 막는다
  만약 s안붙였으면 구글에 메일 보내기 => 학습목적이고 사용자한테 정보를 받으려고 만든게 아니다라고..

4.
도메인

리액트를 활용해서 서버를 키면
주소창에 http://localhost:3000/ 라고 되어있다
이건 우리말고 다른사람이 볼필요가 없어서 뒤에 s가없는다
localhos 기본적인 도메인이다

html파일로 만들어서 라이브서버를 키면
http://127.0.0.1:5500/index.html 라고 되어있다

리액트 => http://localhost:3000/
html => http://127.0.0.1:5500/index.html 
왜 react랑 html 도메인이 다른가?
IP가 달라서
원래 모든 도메인의 원래 IP 주소
원래 모든 웹페이지 및 사이트는 고유한 IP주소를 가지고 있다
ex)
네이버 IP => 728.10.10.1 이다 => 네이버 들어가려면 https://728.10.10.1/index.html 이 ip주소를 쳐야한다
그럼 너무 불편하다
그래서 IP주소를 사용자 입장에서 보다 편리하고, 직관 & 명시적으로 이해할 수 있도록 변환해서 사용하자
  => Domain
https://728.10.10.1/index.html => https://www.naver.com
도메인이라는 주소로 변환환거다 / 보안을 위해 & 유저의 편리를 위해

리액트 => http://localhost:3000/ => 보다 편리하고 직관적으로 한거다

"유저"가 특정 "클라이언트" 페이지에 접속한다면
"서버"에 data를 요청
 => 서버가 가지고 있는 ip주소에 접속하겠다는거다

서버는 하드웨어 => 컨테이너와 같은 공간의 개념
"서버"에 data를 요청 
=> 그럼서버가 큰 하드웨어에서 어느 영역에서 정보를 줄테니 유저한테 그 영역으로 가라고 한다
=> 포트 = port : 서버라는 광활한 하드웨어 공간 중에서 유저가 클라이언트를 통해서 요청한 data를
  전송 & 수신할 수 있도록 다리를 놓아주는 spot zone

IP & Port 를 Domain 대체해서 보여주는 시스템
=> DNS = Domain Name System

http://localhost:3000/
http://localhost:3001/
http://localhost:3002/
=> 3000, 3001, 3002 포트 번호

-----------------------------------------------------------------------------------------------

UI/UX => 웹디자인 => 퍼블리셔 => 프론트엔드 
=> 요즘은 웹퍼블리셔한테도 리액트 기능을 요구하고 있다
=> 그럼 원래 퍼블리셔들은 html, css, js 작업을하면 프론트엔드들은 리액트로 어떻게 가져가나?
=> 기업에서 프론트영역을 구현하는데 있어서 한가지 방법만 있는게 아니다
     프론트엔드 => vue, 리액트, 앵귤러 ..
     백엔드 => 파이썬, 노드, 루비, 자바, c언어 .. 
           다맞다 / 회사에서 고객이 누구냐에 따라 쓰는게 다르다
=> 리액트 기반으로 갈거야 => 퍼블리셔, 프론트엔드는 리액트를 포커스를 맞춰서 작업한다
=> 옛날에는 퍼블리셔가 html, css, js로 작업하면 프론트엔드는 개발을 react로했다
=> 프론트엔드개발 영역이 과잉공급이 되기 시작했다 
=> 퍼블리셔한테 요구하는 사항들이 늘어났다 (리액트, 뷰...) 
      => 퍼블리셔가 최소한의로 react로 ui는 구현할줄 알아야한다
           프론트엔드가 react 훅을 사용해서 함수를 구현등등을 한다
=> 점점 퍼블리셔라는 단어가 사라지는...

-----------------------------------------------------------------------------------------------

파라미터 & 쿼리스트링
http://localhost:3000/
http://localhost:3001/cosmetic
http://localhost:3002/accessory
http://localhost:3003/goods
특정한 경로로 가고싶을때 파라미터를 사용한다
동적경로를 구현한다 => 파라미터를 사용한다

만약 gnb로 활용해서 가는게 아니라 검색창에 원하는 물품을 검색해서 바로 가고자할 때는
그때는 동적인 경로가 중요한것이 아니라 쿼리스트링을 사용한다
http://localhost:3000/product?q=nike
http://localhost:3000/product?q=nike&q1=shoes


URL / URI / URN 개념 도 있다 => 셋은 다른개념이다

http://localhost:3000/
localhost는 기본으로 설정되어 있다
기본적인 도메인이다
3000 => 프로그래밍이 / 리액트가 편의상 만든 넘버다

html파일을 할때 기본 페이지를 index로 하는거랑 같은 개념이다

윈도우를 기반으로 프로그램을 만들어서 로컬 서버를 구현하겠다
=> 서버의 기본 IP default 포트 넘버 : 8080 
