<오늘 커리큘럼>
오전 : React.js
점심 : 상담
오후 : HTML + CSS + JS / UI 구현

* 새로운거 배울때
 - 왜 배우는가? => 취업
 - 프론트엔드 : React.js 진입 필수! 
 - 퍼블리셔 : React.js 우대 사항!


*React.js 
 - UI를 새성해내기 위한 JS 라이브러리
 - 2d 그래픽만으로는 구현하기엔 한계가 있어서
 - UI 영역을 가기 위해서는 필수다
 - 라이브러리 / 프레임워크  <= 두 단어를 많이 접할거다
 - 부트스트랩 : 부트스트랩은 웹사이트를 쉽게 만들 수 있게 도와주는 CSS, JS 프레임워크이다. 하나의 코드로 휴대폰, 태블릿, 데스크탑까지 다양한 기기에서 작동하게 만들 수 있으며, 다양한 기능을 제공하여 사용자가 쉽게 웹사이트를 제작, 유지, 보수할 수 있도록 도와준다. 
     => 변수명 꼭 사용해야 구현됐다.
     => 기능 구현을 위한 명확한 클래스 값을 꼭 사용해야했다
     => 본인들이 만들어 놓은 본인들만의 문법 체계가 존재
     => 그 문법 체계 안에서 무언가를 만들어 낼 수 있다 


* UI 생성을 위한 프론트엔드 & 퍼블리싱 영역의 대표적인 프레임워크 : vue.js / angluar.js
* 라이브러리는 기본적인 웹 표준언어를 활용할 수 있는 여지를 최대한 부여
 일부 기능한해서만 자신들만의 문법 체계를 활용
React.js
 vue.js / angluar.js / React.js => JS 기반이다
 리액트가 라이브러리인지 프레임워크인지, 왜 그런지 알고있기


Angluar : MS / JS 프레임워크 (무지하게 어렵단다 JS할줄알면 2달걸린다)
 => 이건 다들 어려워한다 => 할줄알면 메리트있다 => MS와 관련 작업 필요한 회사들에서는 리액트대신 이거를 사용한다
Vue : 엄청쉽단다 (2주면배운다) / 기능 깊이감이 얕다 => 기능구현이 적다 
     => 카카오가 사용
순수 JS 최대한의 기능 구현하면서 & 중간정도의 난이도 뭐가 없을까?
   => facebook에서 Reacj개발

React.js로 만든 대표 사이트 => facebook, instagram, 넷플릭스, 노션
 sns 플랫폼을 만들기 위해서 만든게 React.js다보니 예제들로 sns가 많이 나온다


* React.js의 강력한 장점!!
 1. 컴포넌트 기반으로 UI 구현 => 컴포넌트를 레고블럭이라고 생각하면 된다
   - 에뛰드 : 모든 전페이지에 header & footer 복붙했다
       => 만약, header & footer를 하나의 독립적인 파일로 생성하고 
            html에서 JS를 사용할때, script태그를 사용해서 연동하듯이 했더라면 
             => 이걸 컴포넌트 기반의로 UI 구현


 2. 가상돔을 활용해서 화면 업데이트 구현
  - DOM
  - html, css 문서들을 JS로 끌어오는 것
 리액트에서는 가상 DOM을 많이 사용해서 DOM에 대한 정의가 확실하게 있어야한다

  - DOM : 일존의 명세서다
  1) VS code를 활용해서 html, css, js를 작성(*문서)
  2) 웹브라우저 :  문서 구현
  3) 컴퓨터 cpu, ram : DOM 명세서를 기반으로 화면에 문서를 구현해준다 
      => parse(html, css)을하고 fetch(스크립트)한다음에 render 랜더링을한다
우리가 작성한 문서를 화면에 구현해줘라는 문서 : DOM
일종의 중간역할을하는 명세서다 : DOM
전통적으로 DOM을 기반으로 하는 웹페이지는 header, 본문, footer
반복적인 요소들은 컴포넌트한다

유명배우의 인스타그램 게시물을 웹브라우저 화면 구현
하트 선택 여부차이만 있을뿐인데 => 웹브라우저의 모든 UI 영역을 다시 그려줘야한다
하트하나 바꼈다고 html, css, js 파일을 다 바꾸기에는 비효율적이다
React를 실행함과 동시에 가상 DOM이 2개가 생성된다   실제 돔이 아니다
 첫번째 가상돔 - 웹브라우저가 랜더링이 된 최초시점의 UI를 기억하고 있는 명세서
 두번째 가상돔 - 첫번째 가상돔에서 업데이트가 된 최종시점의 UI를 기억하고 있는 명세서
 => 첫번째 & 두번째 가상돔 비교해서 업데이트가 된 컴포넌트를 재빠르게 바꿔서 렌더링 시켜준다
 => 쿼리셀렉터같은 요소를 안쓴다 => 돔이 존재하지 않아서 => 가상돔이라서


 3. CSR방식을 활용해서 서버의 의존도를 낮췄다
  - 웹 브라우저에서 상태가 변경 / 업데이트
  - 기존 전통적인 방식 : SSR방식 : Server Side Rendering
  - CSR방식 : Clident Side Rendering

==>> React.js를 할줄안다? => 위 세가지를 할 줄 안다 라는 의미다


* 웹브라우저가 읽을 수 있는 3대 언어!
 - html, css, js
 리액트라는건 웹브라우저가 아니다
 - npm i firebase
     구글 파이어베이스할때 했었다 
 - 구글 chrome 웹브라우저가 V8이라는 검색엔진
 - 
node.js가 나와서 react를..
Node.js는 크로스플랫폼 오픈소스 자바스크립트 런타임 환경으로 윈도우, 리눅스, macOS 등을 지원한다. Node.js는 V8 자바스크립트 엔진으로 구동되며, 웹 브라우저 바깥에서 자바스크립트 코드를 실행할 수 있다.

* Node.js => 갤럭시 / 아이폰 앱 
리액트를 사용하려면 node.js를 실행 기반
제이쿼리같은 외부 플러그인 가져다 쓴는거랑
노드에 다른사람 플러그인 가져다 쓰는거랑은 다르다
node.js 는 js가 사라지지 않는 이상 사라지지 않는다
제이쿼리랑 노드랑은 차원이 틀리다
롱텀서비스 = 

* npm : node package manager
 노드틀 사용하는 개발자들은 npm 
* npm i 설치하고자 하는 앱 이름

react는 Node.js에서도 VIP

npx : node package manager exqute(실행하다)
npx create-react-app .
리액트 정식명칭 =>  create-react-app 
리액트 설치할 폴더명 => .
폴더명 react01 이나 react_1 이런건 되는데 react로 하면 안된다 react는 예약어다
240401로 루트폴더로 하면 안된다

node_modules 용량이 크다 => 앱 용량이 크다
깃허브에 node_modules올리면 에러뜬다
깃허브에 node_modules를 제거하고 올려야한다
node_modules 없으면 node가 안돈다

git pull 한다음에 터미널 npm i 
필요한 노드패키지를 알아서 찾아서알아서 설치해준다

http://localhost:3000/
localhost 로 (사당로..)
3000우편번호
두번째는 3001 세번째는 3002 ...
무조건 3000번부터 시작한다
하나의 경로값 안에 여러 포트를 열 수 있다

웹 페이지 구현 이라 쓰지말고
웹앱 페이지 구현 이라고 해라
 > 웹페이지 안에 UI/UX
 > react native : 안드로이드 앱 , ios 를 한번에 구현시킬 수 있게 했다
 > 앱(어플리케이션) 만들때 => kotlin / babel을 배워야한다
 > flutter 라는 언어가 나왔다 => react native를 능가시키는 웹앱페이지를 구현시킬수 있다
 리액트 - 가상돔을 사용했더니 SEO가 안됐다
 > CSR방식 안좋다 => SSR방식으로 회기하자
 > React.js + TS + Next.js + Node.js => 마스터되면 네카라쿠배가능
     Next.js 필수 조건은 아니지만 필수조건화 되간다
      
컴포넌트는 거의 99% 확률로 반드시 : 대문자로 시작한다!
<App />  app이라는 이름의 컴포넌트


페이지별로 index 파일 갯수가 생기는게 아니라 몇개의 페이지를 하던 inde.html은 하나만 나올거다

SPA : 파이어베이스 배포할때나왔었다 /  Single Page Application
React를 '컴포넌트 기반의 SPA으로 운영되는 CSR방식의 JS 라이브러리 입니다' 라고 설명하면된다(면접때)


Module :
Node.js : JS파일 컴포넌트 화 해서 => 여기에서, 저기에서 사용해야한다 => 이렇게 사용하려면 모듈화로 전환 해야한다 

=> CommonJS 모듈 시스템 구축! => CJS 모듈시스템

=> Ecmascript(js문법 만든 js창시자) JS 모듈 시스템 표준! => ESM 모듈시스템

 CommonJS 보다는 Ecmascript JS 를 더 많이 사용




*Component 문법 - 규칙을 따라줘야한다
 1) JSX 문법
    JS & XML 문법
    API Data 외부에서 가져올때 
    svg 안에 xml = extensible mark language
    js 와 html 혼종

변수를 선언하고 그 선언된 변수안에 숫자, 문자열, 논리, 배열, 객체, 함수 등 값을 넣을 수 있다
* 유의사항! => JSX 문법에서는 직접 사용할 수 없는 값이 있다
 => 객체형 타입의 데이터는 직접 사용 불가!! (참조형 타입의 변수값은 바로 가져다 쓸 수 없다)


 2) 반드시 닫힘 규칙! =>  markup 규칙지켜야 한다!


 3) 반드시 1개 이상의 부모요소가 있어야 한다!
div같이 block 태그 사용하기 싫을때는 빈칸해주면된다
 <></> React.Fragment로 써도 되는데 그냥 빈칸으로 해라(이게 더 대중적)
 div를 써라
React.Fragment로 쓰려면 import React from "react"; 가 있어야한다

4) 