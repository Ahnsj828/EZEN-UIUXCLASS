1. 기본 개념
- components
- virtural Dom
- CSR

2. JSX 문법

3. props 객체

4. state 변수: component가 가지고 있는 상태값
 - 상태 값을 변경하려면 useState() : React Hooks중 하나!!
 - form 태그 요소 안에 있는 기본적인 input 태그 || textarea || select && option
 - 상태의 변화값을 check하고 state 변수값이 업데이트가 될 수 있도록 제어!!

5. props & state 변수 동시에 활용!!

* React Hooks
 -> 언제 , 어떤 리액트 훅을 가져다가 사용해야하는지 모르겠다는 질문

*JS
 짝수 ===> %2 ===0

** 왜? 컴포넌트를 자꾸 만들어서 작업하는가?
 1) React 장점 : JS를 활용 작업 => 300줄 / 문제 = bug
 300줄 달하는 JS 문장 하나씩 검증 해야한다 => debuging

 2) conponent 안에 존재하는 state 변수값이 업데이트가 되는 순간 => rerendering 리랜더링

 * React는 Rendering이 매우 중요한 개념!!
 => html을 포함한 기타 웹브라우저 parsing할 수 있는 문서를 웹 브라우저가 화면에 출력해주는 기능
     =>이 기능을 rendering이라고 한다

  랜더링이 언제 발생하는가?
   0) component가 mount(탄생되는순간)가 되는 순간 무조건 최초 rendering이 발생
   1) component의 state값이 변경되면 무조건 rendering이 발생
   2) 부모 component로 부터 받아오는 props의 값이 변경되면 무조건 rendering이 발생
   3) 부모 component가 rendering이 되면, 무조건 자식 component도 rendering이 된다

* 리액트 훅 : useRef( ) : 특정 돔으로 활용할때 사용
 - Ref = reference 약어 => 참조 라는 뜻
 - 기존 JS, DOM을 활용해서 html 문서를 컨트롤했던 그 기능!
 - JS에서 DOM을 활용해서 input.valuse = ""
  
useState( ) : Component의 State 변수값을 컨트롤 해주는 훅 함수
useRef( ) : 특정 요소의 DOM을 컨트롤 해주는 훅 함수
useEffect( ) : 컴포넌트의 "생애주기(= life cycle)" 를 컨트롤 해주는 훅 함수
   => 중요하다!!

 - 사람도 생애주기가 있다 
 - 탄생 -> 유아기 -> 청소년기 -> 성인 -> 노인 -> 사망
 - 컴포넌트도 생애주기가 존재한다
 - mount(컴포넌트가 시작됐다/ 탄생됐다) -> update(컴포넌트가) -> unmount(컴포넌트 기능종료)
 - 리액트는 가상돔 사용하고 훅으로
       date컴포넌트가 업데이트가 될때 이걸해줘
 1) 의존성 배열이 업데이트 or 변경되면 useEffect( ) 안에 callback 실행
    API데이터 끌어올때 사용한다
    => 외부 API => state
    => 웹 브라우저 처음 켜졌을 때에는 data x
    => 사용자가 지역 매장정보 값 보려고 버튼을 누르거나 select
    => 의존성 배열에 복수의 state값을 적용한 경우, 그 중 1개만 업데이트가 되어도 useEffect( )실행

 2) 만약, "의존성 배열"을 설정하지 않은 경우, 컴포넌트가 랜더링 될 때마다 콜백함수를 실행시킨다
 
 3) 만약, "의존성 배열"에 빈배열을 적용하는 경우, 컴포넌트가 최초 mount가 되는 시점에만 딱 한번 실행

 => API 데이터를 가져와서 사용해야하는 그 시점!!
 => 웹브라우저를 처음 켜자마자 바로 무언가를 딱 한번 실행시켜야하는 상황!!
     ex. 팝업창 
업데이트 해야될때 => 연산작업해야할때 사용

cleanup 개념 



*ToDoList => React.js
* 어떤 기능을 구현할것인지에 대한 정의 => 화면 UI 설계  => 기능 부여
 > Header 컴포넌트 : ToDoList 소개 & 설명하는 텍스트 역할
 
 > ToDo Editor 컴포넌트 :
     - Input태그영역 / 사용자가 지금 해야할 일을 입력하는 영역

 > Todo List 컴포넌트 
     - 사용자가 editor를 통해서 입력한 state 값을 받아서 출력 영역

 > Todo Item 컴포넌트
     - 사용자가 Todo List를 통해서 입력한 값이 

 <TodoList 앱의 component 구조>
                 _____   App _________
                 |          |              |   
           Header   TodoEditor  TodoList
                                             |
                                       TodoItem
------------------------------------------------------------------
* node Modules 삭제하고 다시 작업을 하고싶다!! => npm i
삭제했는데도 되는 이유?
  => package.json에 "dependencies" 때문에 가능한거다 
      "dependencies"는 알고있어서
npm i는 "dependencies" 를 다시 설치해주겟다라는거다
package-lock.json에는 상세하게 나와있다
구체적인 버젼 등등이 나와있다
어제버젼과 달라졌는지 등등을 확인 할 수 있다

실무에서 어제까지 작업했던게 하루사이에 업그레이드가 되서
이전버전과 호환이 안될때는 안열린다
------------------------------------------------------------------

Data를 어떻게 저장하고 관리할 것인가?
 1) 어떤 데이터를 수집할 것인가?
   - id -> 아이템(할일목록들)마다 고유의 id가 존재해야한다
   - boolean -> 할일을했는지 안했는지 여부
   - todotext 
   - tododate

 2) Mockup Data를 임시로 생성해 놓고 작업
   - 샘플링 된 작업물

 3) Mockup Data는 어떤 컴포넌트에 존재해야하나? => App 

 4) 우리는 어떤 방식으로 위에서 수집한 Data를 보관?
   보관 => 변수명을 선언하고 변수값을 할당 : 변수를 생성!!

 윈시타입 / 참조타입
   - 객체유형 타입 자료 1차 저장을 해야한다!!
   - filter함수 => 이터러블 객체
   - 순회가능 데이터 형태
   - 배열
     데이터를 하나씩 추가하고 데이터를 검색하려고한다 =>검색기능 => filter => 배열

React.js 와 같은 프론트엔드 라이브러리 혹은 프레임워크를 사용해서 Data를 관리하게되면 
항상 다음과 같은 프로세스 과정을 기억하고 실행할 준비를 해야한다!!!

* CRUD 프로세스 (웹페이지에 항상 존재한다)
   - create : 컨텐츠 생성
   - Read : 생성된 컨텐츠 확인. 읽을수 있는 기능이 있어야한다
   - Update : 최초 생성한 데이터를 업데이트기능
   - Delete : 과거에 생성했던 데이터를 삭제할 수 있는 기능
       ===>> CRUD 순서에 맞춰서 기능을 만들어야한다



1. 부모 컴포넌트 내부에서 자식 컴포넌트를 만들어서 해당 컴포넌트를 
   또다른 자식 컴포넌트에게 전달!

2. 자식 컴포넌트에 key와 value값을 생성해서 전달하는 방법

* 삭제하기 버튼이 눌려진 아이템을 제외한 나머지 아이템들만 따로 다시 모아서 재출력!!

