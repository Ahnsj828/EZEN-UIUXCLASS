// 봉우리
// 지도 정보가 N*N 격자탄에 주어집니다. 각 격자에는 그 지역의 높이가 쓰여있습니다. 각 격자판의 숫자 중 자신의 상하좌우 숫자보다 큰 숫자는 봉우리 지역입니다. 봉우리 지역이 몇개 잇는 지 알아내는 프로그램을 작성하세요.
// 격자의 가장자리는 0으로 초기화 되었다고 가정한다
// 만약 N=5 이고, 격자판의 숫자가 다음과 같다면 봉우이릐 개수는 10개입니다.
// 0 0 0 0 0 0 0
// 0 5 3 7 2 3 0
// 0 3 7 1 6 1 0
// 0 7 2 5 3 4 0
// 0 4 3 6 4 1 0
// 0 8 7 3 5 2 0
// 0 0 0 0 0 0 0

// 입력 설명 : 첫 줄에 자연수 N이 주어진다(1<=N<=50)
// 두 번째 줄부터 N줄에 걸쳐 각 줄에 N개의 자연수가 주어진다. 각 자연수는 100을 넘지 않는다

// 출력설명 : 봉우리의 개수를 출력하세요

// 입력예제1 :
// 5
// 5 3 7 2 3
// 3 7 1 6 1
// 7 2 5 3 4
// 4 3 6 4 1
// 8 7 3 5 2

// 출력예제1 : 10

// const arr = [
//   [5, 3, 7, 2, 3],
//   [3, 7, 1, 6, 1],
//   [7, 2, 5, 3, 4],
//   [4, 3, 6, 4, 1],
//   [8, 7, 3, 5, 2],
// ];

// const solution = (arr) => {
//   let answer = 0;
//   let max = Number.MIN_SAFE_INTEGER;

//   for (let x of arr) {
//     let sum = 0;
//     let tmp = x;

// 		while(tmp) {
// 			if(x>x-1 && x>)
// 		}
//   }

//   return answer;
// };

// console.log(solution(arr));

// -------------------------------------------------------------------------
// < 쌤 >
// 코딩 테스트 난이도 => 반복문

// N개의 행 & 열 격자판 => N = 5
const arr = [
  [5, 3, 7, 2, 3],
  [3, 7, 1, 6, 1],
  [7, 2, 5, 3, 4],
  [4, 3, 6, 4, 1],
  [8, 7, 3, 5, 2],
];
// => 25개의 숫자를 다 끄집어와서 해당값이 상하 좌우의 값과 비교해야한다
// => 25번의 반복실행이 필요하다
// 행과열을 계산할 때 2중 for문

const solution = (arr) => {
  let answer = 0;
  const n = arr.length; // 5

  const dx = [-1, 0, 1, 0];
  const dy = [0, 1, 0, -1];

  // // 행 & 열 총 25개의 값 찾기
  // for (let i = 0; i < 5; i++) {
  //   // 행
  //   for (let j = 0; j < 5; j++) {
  //     // 열
  //   }
  // }

  // 👇🏼   // 재사용 할 수 있는 코드로 만 들 수 있기 위해

  // 행 & 열 총 25개의 값 찾기
  for (let i = 0; i < n; i++) {
    // 행

    for (let j = 0; j < n; j++) {
      // 열

      let flag = 1;
      for (let k = 0; k < 4; k++) {
        let nx = i + dx[k];
        let ny = j + dy[k];

        if (
          nx >= 0 &&
          nx < n &&
          ny >= 0 &&
          ny < n &&
          arr[nx][ny] >= arr[i][j]
        ) {
          flag = 0;
          break;
        }
      }
      if (flag) answer++;
      // arr[i][j]; // 배열에 값을 다 갖고있는거...
    }
  }
};

console.log(solution(arr));

//       7                 (0, 2) (1, 3) (2, 2) (1, 1)
//  7  < 1 >   8           (1, 2)
//       5
//  => dx =[-1, 0]  = [-1, 0, 1, 0]
//  => dy =[0, 1]  =  [0, 1, 0, -1]
