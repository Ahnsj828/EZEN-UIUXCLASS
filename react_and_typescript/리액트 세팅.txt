1. react app 실행시킬 때에는 반드시 root폴더에서 시작해야한다

2. 터미널 : ctrl +~
 > cmd

3. 리액트 앱 설치
  npx create-react-app 프로젝트
  npx create-react-app 01react
  npx create-react-app .

4. react 사용하지말기!
   react는 예약어다! => 폴더명 파일명 사용하지말기
 수업끝나거나 작업 끝나면 내 컴퓨터 내에 노드 모듈스 지우기

npm run start 는 패키지.js가 있는 곳에서 해야된다
240402에서 하는게 아니라 01react에서 하는거다
cd 01react
npm run start

5. 삭제를 하고 시작해야하는 데이터
  1) src 폴더 안에 app.test.js
  2) src 폴더 안에 logo.svg
  3) src 폴더 안에 report~
  4) src 폴더 안에 setup~
  5) indext.js 에서 StrictMode삭제
 
<app.js>에서----------------------------
  import "./App.css";

function App() {
  return <div className="App"></div>;
}
export default App;
------------------------------------------
<index.js>에서----------------------------
import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<App />);
------------------------------------------


src안에 폴더 components 만들기
components안에 Header.js , Body.js, Footer.js 만들기
   => 이때  꼭 대문자!!

6. class형식으로 컴포넌트
 > function 형식으로 

7. react에서는 외부스타일 사용빈도가 그렇게 높지 않다
  => styled-component
  => tailwind
  
8. JSX 문법 특징
 -반드시 1개의 부모가 존재해야 한다
 -원시 타입에 대한 변수는 직접 사용 가능
   (*단 사용시 { } 표기 필수 )
 - 참조 타입 면수 중 객체의 경우는 직접 사용 불가
    (*객체 안에 kdy를 활용해서 value)
 - 조건부 랜더링 가능
 - 삼항조건연산자를 많이 사용한다
 
9. Props : 객체 
 property의 약어 => property : 속성(값)
 * 컴포넌트간에 데이터를 전달할 수 있는 기능
 A컴포넌트가 a_1 객체를 B한테 전달하려면
 Props 규칙 => 부모 컴포넌트가 자식 컴포넌트에게 일방통행으로 데이터를 전달할 수 있다
 *형제 컴포넌트간에 어떻게 데이터를?
 부모 => 자식 O
 자식 => 부모 X ( 자식 => 부모한테 데이터 못간다 )
 형제 => 형제 X ( 형제에서 형제한테 데이터를 가져갈 수 없다 )
부모가 자식한테 데이터 줄때 객체 형태를 띄고 있고
객체는 key와 value 형식으로
 
  => useContext  / React Hooks
  => middleware / Redux || Recoil || React query
  => Redux thunk 외 기타 등등

 // 웹 브라우저에 빨간 경고창이 나왔다는 것은 리액트 실행을 전면적으로 중단!! 서비스 중단!!

props는 반드시 부모에서 자녀에게만 데이터를 줄 수 있다!

props의 자료형태는 반드시 객체의 타입!!

props로 데이터를 받아올 때, 구조분해할당을 통해 바로 변수 값으로 찾아 올 수 있다
(* 이때, 반드시 객체 내 key 네이밍과 동일한 변수 명을 설정)

심지어 props는 컴포넌트로 전송이 가능하다!
(*단, 컴포넌트를 전송할 때에는 key값이 children으로 자동 설정됨)

*** 다하면 터미널에서 ctrl + c 하고 엔터 ->  y 하고 엔터
*** 다하면 node_modules 지우기
*** 나중에 node_modules폴더 지운곳에서 필요할 때에는 
       터미널에서 npm i 치면된다



* 지금까지 리액트를 활용한 예제 : 정적이 변경사항 존재 버튼 : 알림창!

* 컴포넌트 간에 props 전달!

* 웹 브라우저 상에서 동적인 변화가 발생되었을 때, 감지하고, 업데이트를 시켜줄 수 있어야 
  => 데이터를 가공.편집.전송

 1) 사용자가 입력한 값
 2) 사용자가 값을 입력했다는 사실을 인지할 수 있어야 한다
    => 사용자로 인하여 상태가 업데이트가 되었다
 3) 사용자가 입력한 값을 가져온다

* state!! => 상태변화의 값을 컨트롤 하기 위해서 리액트만의 문법 하나를 더 공부!

useState - 상태 변화할때 사용
useEffect
useContext
useRef
  => react Hooks 종류들(이거 외에도 많다)

*meta : 개발자 구현 기능 다양
* react Hooks

숫자 하단에 버튼을 생성하고, 그 버튼이 클릭이 될 때마다 값이 증가하게 만들고 싶다!
(처음 상태(state!!)가 변화가 되게 하려는거)

* state : 컴포넌트 안에 존재하는 상태값
  (*단, 1개의 컴포넌트 안에는 다양한 복수의 state 값 존재 가능!!)

* state의 상태 값을 변화시킬 수 있는 (*제어할 수 있는) 리액트에는 훅이 존재한다
  => 이 훅의 이름은 useState
  => useState 훅 => 함수

* useState 훅 함수 실행 => 배열값을 반환!! => 초기값 / 초기값을 변경시킬 수 있는 함수

* 구조분해할당 방식으로 작성 (배열안에 있으니까)

* useState 리액트 훅을 사용해서 state의 값이 변경될 때마다 
 웹 브라우저는 해당 컴포넌트를 다시 랜더링한다!!
   => 다시 새로고침해서 불러온다 => 리랜더링!!

 state  form 태그에서 많이 사용한다
 form 태그가 중요하다